{"updated_at": "2013-05-10T18:35:43Z", "repo": "rails", "created_at": "2013-05-09T21:37:35Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/17691536", "id": 17691536, "issue_url": "https://api.github.com/repos/rails/rails/issues/10539", "issue_id": 10539, "user": {"repos_url": "https://api.github.com/users/egilburg/repos", "type": "User", "html_url": "https://github.com/egilburg", "starred_url": "https://api.github.com/users/egilburg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/egilburg/subscriptions", "following_url": "https://api.github.com/users/egilburg/following{/other_user}", "gravatar_id": "cc4f5494a8dcaaf577e678cb3901dab6", "organizations_url": "https://api.github.com/users/egilburg/orgs", "url": "https://api.github.com/users/egilburg", "gists_url": "https://api.github.com/users/egilburg/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/cc4f5494a8dcaaf577e678cb3901dab6?d=https%3A%2F%2Fidenticons.github.com%2F552d65b6e9616642fd0217dc7f8361bd.png", "id": 242532, "events_url": "https://api.github.com/users/egilburg/events{/privacy}", "login": "egilburg", "received_events_url": "https://api.github.com/users/egilburg/received_events", "followers_url": "https://api.github.com/users/egilburg/followers"}, "body": "There is a distinction between SQL-specific syntax and basic Ruby array syntax. For example as of Rails 4, `.distinct` would do an SQL count, but `.uniq` would load all into memory and use `Array`'s / `Enumerable`'s `uniq`. For your case, there is a method called `.exists?` that uses SQL, and `empty?` seems to map to it, while `blank?` seems not to.\r\n\r\nThat being said, I agree with latest direction of making all commands that have an SQL equivalent use that equivalent, unless the user explicitly states they want Ruby array, such as the latest change that makes `.all` return scope, forcing user to explicitly use `.to_a` if they _really_ want an array. This way novice users won't get burned if they use `.all` because they don't know about `.scoped`.\r\n\r\nSo I **support this change** - IMO all common methods (`.empty?`, `.blank?`, `.any?`, `.uniq`, I'd even go as far as `.select` and `.detect`) should map to their nearest equivalent SQL scope (`.exists?` for `blank?`/`any?`/ `empty?`, `.distinct` for `uniq`, `.where` for `select`, `.where` with `LIMIT 1 `for `.detect` etc.), unless user explicitly does `.to_a`. first. The idea is to make the commands work best for the common case and for the novice user - experienced users who have edge case requirements would figure out how to explicitly cast to array on their own.\r\n\r\n---\r\n\r\nMore importantly, however, I think Rails should **pick a direction and stick to it** - either map all common Ruby `Array` / `Enumerable` methods (and their Active Support extensions) to an SQL equivalent if it exists, or map none of them. The case where we map `.empty?` to `.exists?` but not `.blank?`, and similar cases like this, seem like a rather bad discrepancy.\r\n\r\nEdit - realized isn't not quite as simple - `exists?` comes from `Querying` while `blank?` is on `Relation`, but the idea stands.", "_id": {"$oid": "5237dddcbd3543c151008b60"}, "html_url": "https://github.com/rails/rails/pull/10539#issuecomment-17691536"}
