{"updated_at": "2011-05-11T16:44:31Z", "repo": "rails", "created_at": "2011-05-11T16:44:31Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/1141506", "id": 1141506, "issue_url": "https://api.github.com/repos/rails/rails/issues/512", "issue_id": 512, "user": {"repos_url": "https://api.github.com/users/pivotalneutron/repos", "type": "User", "html_url": "https://github.com/pivotalneutron", "starred_url": "https://api.github.com/users/pivotalneutron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pivotalneutron/subscriptions", "following_url": "https://api.github.com/users/pivotalneutron/following{/other_user}", "gravatar_id": "6a3655e320245d3587aa97b6efb3fca1", "organizations_url": "https://api.github.com/users/pivotalneutron/orgs", "url": "https://api.github.com/users/pivotalneutron", "gists_url": "https://api.github.com/users/pivotalneutron/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/6a3655e320245d3587aa97b6efb3fca1?d=https%3A%2F%2Fidenticons.github.com%2F764b3ddcbbd00f3b58aeef81fd4f0903.png", "id": 533969, "events_url": "https://api.github.com/users/pivotalneutron/events{/privacy}", "login": "pivotalneutron", "received_events_url": "https://api.github.com/users/pivotalneutron/received_events", "followers_url": "https://api.github.com/users/pivotalneutron/followers"}, "body": "We can't really separate the two bug fixes.  It's just one fix that solves to problems.\r\n\r\nI cleaned up the tests in two of your comments.  But I'm not sure it is possible to do the third.  We resorted to inspecting the SQL because the count should be the same number either way.  The change just eliminates an unnecessary LEFT OUTER JOIN.  Any time it adds the join, it also adds a DISTINCT table_name.primary_column to the count condition, so the count that is returned is always the same.\r\n\r\nThe reason this problem came up is we were trying to join the table in ourselves, and the :includes was causing a duplicate table alias problem.  We could restructure the tests to do the same thing, although then we're just going to have a test that expects an exception NOT to be raised.\r\n\r\nLet me know your preference there, or if you have any other thoughts on another way of testing this.", "_id": {"$oid": "52385efebd3543c1510120d2"}, "html_url": "https://github.com/rails/rails/pull/512#issuecomment-1141506"}
