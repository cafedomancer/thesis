{"updated_at": "2012-09-24T16:55:53Z", "repo": "rails", "created_at": "2012-09-24T16:55:53Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/8826023", "id": 8826023, "issue_url": "https://api.github.com/repos/rails/rails/issues/7251", "issue_id": 7251, "user": {"repos_url": "https://api.github.com/users/dapi/repos", "type": "User", "html_url": "https://github.com/dapi", "starred_url": "https://api.github.com/users/dapi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dapi/subscriptions", "following_url": "https://api.github.com/users/dapi/following{/other_user}", "gravatar_id": "2acd6312f73d16ce507b6e7cb7a3d548", "organizations_url": "https://api.github.com/users/dapi/orgs", "url": "https://api.github.com/users/dapi", "gists_url": "https://api.github.com/users/dapi/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/2acd6312f73d16ce507b6e7cb7a3d548?d=https%3A%2F%2Fidenticons.github.com%2Fc06debb249d4e75425c7f2c2c9e96a5c.png", "id": 31139, "events_url": "https://api.github.com/users/dapi/events{/privacy}", "login": "dapi", "received_events_url": "https://api.github.com/users/dapi/received_events", "followers_url": "https://api.github.com/users/dapi/followers"}, "body": "I'm talking not about view's.\r\n\r\nIn real life Forms contains two parts.\r\nFirst is a view (it's Formastic or so)\r\nSecond - some server-side object that requires and validates parameters (it\r\nis missed in Rails)\r\n\r\nThe list of required and permitted parameters is linked to forms, not to\r\nactions of controllers and not to models.\r\n\r\nExample.\r\n\r\n1) RegistrationForm:\r\n  = f.input :login\r\n  = f.input :password\r\n  = f.input :password_confirm\r\n\r\n2) Profile update form:\r\n= f.input :login\r\n= f.input :email\r\n= f.input :name\r\n\r\n4) Form for update password:\r\n= f.input :password\r\n= f.input :password_confirm\r\n\r\n5) Form of editing users for admins:\r\n= f.input :login\r\n= ..etc all parameters\r\n\r\n6) Form for second-lever users:\r\n= f.input :login\r\n= f.input :specific_field\r\n\r\nIn every form specific list of fields, specific list of required and\r\npermitted fields.\r\n\r\nIn controller we must have something like this:\r\n\r\nRegistrationFormVlidator.new.validate params\r\nProfileFormValidator.new.validate params\r\nPasswordFormVlidator.new.validate params\r\netc\r\n\r\nEvery FormValidator requires and permits and also validates parameters in\r\ntheir own way.\r\n\r\nYes we can have default UserFormValidator or specific role of current_user\r\nto this FormValidator.\r\n\r\nThe key question is validation, not just requires and permits. And\r\nextraction of these functions from controller to a separate class.\r\n\r\nOn Mon, Sep 24, 2012 at 8:14 PM, David Heinemeier Hansson <\r\nnotifications@github.com> wrote:\r\n\r\n> I have many forms pointing to the same controllers. Desktop and mobile web\r\n> views, APIs, etc. This verification also cannot be trusted to the view as\r\n> you don't want to tamper with it.\r\n>\r\n> I wouldn't bother with the validates :user, :presence check if you feel\r\n> like you're duplicating yourself.\r\n>\r\n> On Sep 24, 2012, at 10:25 AM, Danil Pismenny wrote:\r\n>\r\n> > Strong Prameters does not solve the problem of checking parameters in\r\n> Rails. The problem is model-based validation.\r\n> >\r\n> > Require or not require, permit or not permit, validate and how to\r\n> validate - these are questions of the Form, not of a model and not of a\r\n> controller.\r\n> >\r\n> > Model-based validation must be like SQL constraints - simple, basic and\r\n> unconditional. It's about solidity of data, it's about consistency, not\r\n> roles or permissions.\r\n> >\r\n> > And params are form-specific, not of controller. They can be used with\r\n> different models, presenters and controllers.\r\n> >\r\n> > One form can require :password, another one require :email, another one\r\n> require :full_name and permit to another field.\r\n> >\r\n> > Another problem with StrongParameters - they ara introduce duplication\r\n> of responsibilities:\r\n> >\r\n> > params.require(:user) # in controller\r\n> >\r\n> > and\r\n> >\r\n> > validates :user, :presence => true # model\r\n> >\r\n> > What is difference between these approaches?\r\n> >\r\n> > Resolution\r\n> >\r\n> > Checking parameters (validation, requirements etc) must be extracted to\r\n> the dedicated class.\r\n> >\r\n> > --\r\n> > Reply to this email directly or view it on GitHub.\r\n> >\r\n> >\r\n>\r\n> --\r\n> David Heinemeier Hansson\r\n>\r\n> --\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/7251#issuecomment-8824545>.\r\n>\r\n>\r\n\r\n\r\n\r\n-- \r\n\u00e4\u00c1\u00ce\u00c9\u00cc \u00f0\u00c9\u00d3\u00d8\u00cd\u00c5\u00ce\u00ce\u00d9\u00ca\r\n\u00f4\u00c5\u00c8\u00ce\u00c9\u00de\u00c5\u00d3\u00cb\u00c9\u00ca \u00c4\u00c9\u00d2\u00c5\u00cb\u00d4\u00cf\u00d2\r\n______________________________________________\r\ndanil@investcafe.ru <birg@investcafe.ru> | www.investcafe.ru\r\n\u00e9\u00ce\u00d7\u00c5\u00d3\u00d4\u00cb\u00c1\u00c6\u00c5 | \u00ee\u00c5\u00da\u00c1\u00d7\u00c9\u00d3\u00c9\u00cd\u00cf\u00c5 \u00c1\u00ce\u00c1\u00cc\u00c9\u00d4\u00c9\u00de\u00c5\u00d3\u00cb\u00cf\u00c5 \u00c1\u00c7\u00c5\u00ce\u00d4\u00d3\u00d4\u00d7\u00cf\r\n\u00ed\u00cf\u00c2.: +7 903 389-12-28\r\nSkype: danil_pismenny", "_id": {"$oid": "523dfc3ebd354364b900c21c"}, "html_url": "https://github.com/rails/rails/pull/7251#issuecomment-8826023"}
