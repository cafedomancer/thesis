{"updated_at": "2011-03-23T23:06:48Z", "repo": "rails", "created_at": "2011-03-23T23:06:48Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/910237", "id": 910237, "issue_url": "https://api.github.com/repos/rails/rails/issues/201", "issue_id": 201, "user": {"repos_url": "https://api.github.com/users/jmileham/repos", "type": "User", "html_url": "https://github.com/jmileham", "starred_url": "https://api.github.com/users/jmileham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmileham/subscriptions", "following_url": "https://api.github.com/users/jmileham/following{/other_user}", "gravatar_id": "079ab1cc5aa71e625bb160e62b09f09c", "organizations_url": "https://api.github.com/users/jmileham/orgs", "url": "https://api.github.com/users/jmileham", "gists_url": "https://api.github.com/users/jmileham/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/079ab1cc5aa71e625bb160e62b09f09c?d=https%3A%2F%2Fidenticons.github.com%2F02c1ffbf4378893da347eb8ec50b2456.png", "id": 40619, "events_url": "https://api.github.com/users/jmileham/events{/privacy}", "login": "jmileham", "received_events_url": "https://api.github.com/users/jmileham/received_events", "followers_url": "https://api.github.com/users/jmileham/followers"}, "body": "Thanks Aaron,\r\n\r\nCool... the ability to use subqueries with in is no doubt far more valuable in everyday use than what I needed it to do. :)  From a quick browse of the Arel code, though, it appears that Arel supports subqueries in the where clause as arguments to `#in` and `#not_in`, and as arguments of `#union`, `#intersect` and `#except`, but can't use a SelectManager as the argument of a `#from`.  This is a kind of subquery that may not be philosophically in line with relational algebra, so maybe that's not a bad thing.  But basically Arel can't presently do things like this without rendering the SQL of the subquery out first:\r\n\r\nhttps://github.com/jmileham/rails/blob/d5994ee48af14d67f0eec7d23863d4b19211b078/activerecord/lib/active_record/relation/calculations.rb#L324-325\r\n\r\nThis could probably be done if Arel could visit SelectManager, but I'm not sure whether that's the right thing or not.  Alternatively, Arel could probably wrap this into the behavior of its own count operation, because it's arguable that Arel shouldn't even be capable of rendering the SQL `SELECT COUNT(*) FROM t LIMIT 3;` since the LIMIT is noise in that context.", "_id": {"$oid": "523865dcbd3543c15101274c"}, "html_url": "https://github.com/rails/rails/pull/201#issuecomment-910237"}
