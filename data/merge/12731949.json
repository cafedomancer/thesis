{"updated_at": "2013-01-26T06:49:19Z", "repo": "rails", "created_at": "2013-01-26T06:49:19Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/12731949", "id": 12731949, "issue_url": "https://api.github.com/repos/rails/rails/issues/9068", "issue_id": 9068, "user": {"repos_url": "https://api.github.com/users/wangjohn/repos", "type": "User", "html_url": "https://github.com/wangjohn", "starred_url": "https://api.github.com/users/wangjohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wangjohn/subscriptions", "following_url": "https://api.github.com/users/wangjohn/following{/other_user}", "gravatar_id": "ddbca6015f428461aa5ed3b5f0fb74ab", "organizations_url": "https://api.github.com/users/wangjohn/orgs", "url": "https://api.github.com/users/wangjohn", "gists_url": "https://api.github.com/users/wangjohn/gists{/gist_id}", "avatar_url": "https://2.gravatar.com/avatar/ddbca6015f428461aa5ed3b5f0fb74ab?d=https%3A%2F%2Fidenticons.github.com%2F0f072cda8c91e247b8dd76fa1b10a64e.png", "id": 1075780, "events_url": "https://api.github.com/users/wangjohn/events{/privacy}", "login": "wangjohn", "received_events_url": "https://api.github.com/users/wangjohn/received_events", "followers_url": "https://api.github.com/users/wangjohn/followers"}, "body": "I corrected the code based on your suggestions. Also, it seems that all transactions, once they are rolledback or committed, are never changed so that the list of states in the TransactionState class is unnecessary. I've run a pretty simple test where I do the following:\r\n\r\nTopic.transaction do\r\n  while true\r\n    Topic.new\r\n  end\r\nend\r\n\r\nOn my machine (ruby 1.9.3), the amount of memory seems to stabilize pretty quickly and I was able to created millions of objects without any marked increase in memory. Note that the Topic class does not have callbacks.", "_id": {"$oid": "523d5b43bd354364b9006114"}, "html_url": "https://github.com/rails/rails/pull/9068#issuecomment-12731949"}
