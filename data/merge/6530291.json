{"updated_at": "2012-06-24T12:34:34Z", "repo": "rails", "created_at": "2012-06-24T03:43:08Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/6530291", "id": 6530291, "issue_url": "https://api.github.com/repos/rails/rails/issues/6344", "issue_id": 6344, "user": {"repos_url": "https://api.github.com/users/mauricio/repos", "type": "User", "html_url": "https://github.com/mauricio", "starred_url": "https://api.github.com/users/mauricio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mauricio/subscriptions", "following_url": "https://api.github.com/users/mauricio/following{/other_user}", "gravatar_id": "a91bd6cef23eb3516245a092e196c4da", "organizations_url": "https://api.github.com/users/mauricio/orgs", "url": "https://api.github.com/users/mauricio", "gists_url": "https://api.github.com/users/mauricio/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/a91bd6cef23eb3516245a092e196c4da?d=https%3A%2F%2Fidenticons.github.com%2Fc7be03f5d811ed29c328526ca8ab0d61.png", "id": 5742, "events_url": "https://api.github.com/users/mauricio/events{/privacy}", "login": "mauricio", "received_events_url": "https://api.github.com/users/mauricio/received_events", "followers_url": "https://api.github.com/users/mauricio/followers"}, "body": "@tenderlove I'm +1 for not failing silently as it is today. Letting someone use a `time` field in SQLite and then generating a `schema.rb` with `datetime` without the user knowing is as dangerous as the original issue that generated the pull request. it might even cause issues if someone relies on the column information (as I am relying on my PR) in their code. \n\nImagine a form generator that checks the columns and their types, I did define this field to be a `time`, but when I query this information from the AR columns hash the field comes back as `datetime` and in my view I will generate a `datetime` form field which is going to make me wonder WTF is happening with my code, as my migration is correct (but my `schema.rb` will not be and it might take some time for me to figure this out).\n\nIf you are using SQLite you should probably be aware of this *interesting* behavior of your database and you should be able to work around it yourself (not being able to cleanly handle dates and times in general). We can even add this information cleanly at the AR documentation so everyone is aware that while you **can** define a `time` field when using SQLite, it will be stored as a full timestamp and you should work around this issue properly (or even be smart and just create two fields, one for the hour and another for the minutes).\n\nI think throwing an exception might be too harsh, specially for people like @tenderlove that use SQLite in development and something else in production (which is pretty common, I have done this myself and my target was MS SQL Server), as they would have to work some magic to get `time` definitions to work. Having the information cleanly specified so that people understand the issues they will face seems to be good enough.\n\nOther databases will handle his case correctly (MySQL and PostgreSQL do have time fields and will just work).", "_id": {"$oid": "52380aabbd3543c15100cf41"}, "html_url": "https://github.com/rails/rails/pull/6344#issuecomment-6530291"}
