{"updated_at": "2012-10-12T22:56:33Z", "repo": "rails", "created_at": "2012-10-12T22:56:33Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/9396103", "id": 9396103, "issue_url": "https://api.github.com/repos/rails/rails/issues/7392", "issue_id": 7392, "user": {"repos_url": "https://api.github.com/users/the8472/repos", "type": "User", "html_url": "https://github.com/the8472", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gravatar_id": "73c735c48c009e30be46512e9dc7f29a", "organizations_url": "https://api.github.com/users/the8472/orgs", "url": "https://api.github.com/users/the8472", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/73c735c48c009e30be46512e9dc7f29a?d=https%3A%2F%2Fidenticons.github.com%2F570ce0330acf4d9c41f71e343203c065.png", "id": 1065730, "events_url": "https://api.github.com/users/the8472/events{/privacy}", "login": "the8472", "received_events_url": "https://api.github.com/users/the8472/received_events", "followers_url": "https://api.github.com/users/the8472/followers"}, "body": "As i mentioned in issue #3052 the documented of scopes says that\r\n\r\n> A scope represents a narrowing of a database query\r\n\r\nIf understood as a set operation then applying a scope should always result in returning subset of the current records. Overwriting equalities on the other hand could even result in a completely disjoint set compared to the original relation.\r\n\r\nThis could even be considered a security issue if a default scope is set to hide some records which should remain logically deleted unless `.unscoped` is used explicitly.\r\n\r\nIt's also quite inconsistent that `A.where().where()` behaves differently from `A.where().merge(A.where())`. It's like two assignments to the same hash would have a different result than merging two different hashes.\r\n\r\n> It's important to note that merge gets called in all kinds of ways that aren't explicit.\r\n\r\nA default scope is a very explicit thing though. And I don't like them for anything but global \"nobody (not even admins) should see this by default\" stuff. And in exactly that case they don't even work, unless i use `in()` instead of the equality.\r\nFor almost any other use case they often just get in the way forcing you to sprinkle your code with `.unscoped` in too many places instead of just adding one scope in exactly the place you need it.", "_id": {"$oid": "5237fc1fbd3543c15100b8e6"}, "html_url": "https://github.com/rails/rails/pull/7392#issuecomment-9396103"}
