{"body": "@pmahoney Well, hm. Here's what I've seen (and even have a test I could dig up to demonstrate). \n\n* thread1 wants a connection, and none are available so it waits. \n* Later another thread checks the connection back in, so it #signals.  \n* thread1 wakes up -- inside the mutex --  but finds that there's _still_ no connection available.  Somehow, some other thread has grabbed it in between the checkin/signal, and when thread1 actually gets scheduled inside the mutex again. \n\nNow, the thread that 'stole' the mutex out of order may not have been a thread that was actually waiting.  It may be that in between the signal (when thread1 becomes 'runnable'), and when thread1 is actually _scheduled_, some completely different thread (that was not previously waiting), manages to get scheduled, tries to a checkout -- finds that, hey, there's a connection available  (because thread1 hasn't been scheduled yet so hasn't had a chance to take it), and grabs it without waiting at all. I believe that is in fact what was happening. \n\nIf your code doesn't solve that issue --and I don't _think_ it does -- then I'm not sure I understand what issue your code does solve, vs. the state before your patch. pre-your-patch, threads were already waiting on a ConditionVariable, and would premably already get woken up in order, right?  Although your test results certainly seem to show that things are improved, I just don't understand why/how. :)  (**update q**: Can you confirm that under your new code, as demonstrated in the tests, no thread will ever wait (much) _longer_ than it's timeout?  That's the most alarming feature of master pre-patch, I think we should make sure that never happens -- better to have a thread timeout because it had a connection 'stolen' then to have a thread that can wait without timing out with no upper bound). \n\nI had a test that sort of demonstrated this, but it was kind of a crazy hacky test -- the sort of race condition it is, the test basically needed to run like 100 threads, and maybe 5% of them or what have you would get their connection 'stolen'.  The test demonstrated this under an old version of 3-2-stable, and it was demonstrated by some threads winding up raising the TimeoutException long _before_ the @timeout value -- because they got woken up, but then found there was still no connection available, and in the code at that time, that would cause them to raise. But that exact test woudln't demonstrate against current 3-2-stable, because it's been patched so when this happens, the thread just goes to sleep again without waiting. But the underlying problem, of other threads coming in and stealing connections, is still there. The test would need to be rejiggered a bit to show that in current 3-2-stable of master (which works somewhat differently already) -- it's tricky to figure out how to demonstrate these kinds of race conditions, but I could try to work it out -- but I couldn't figure out any way to solve it. ", "url": "https://api.github.com/repos/rails/rails/issues/comments/5887633", "created_at": "2012-05-23T23:56:36Z", "html_url": "https://github.com/rails/rails/pull/6416#issuecomment-5887633", "updated_at": "2012-05-24T00:09:49Z", "repo": "rails", "issue_id": 6416, "user": {"following_url": "https://api.github.com/users/jrochkind/following{/other_user}", "events_url": "https://api.github.com/users/jrochkind/events{/privacy}", "organizations_url": "https://api.github.com/users/jrochkind/orgs", "url": "https://api.github.com/users/jrochkind", "gists_url": "https://api.github.com/users/jrochkind/gists{/gist_id}", "html_url": "https://github.com/jrochkind", "subscriptions_url": "https://api.github.com/users/jrochkind/subscriptions", "avatar_url": "https://1.gravatar.com/avatar/6a13e655e637138f8d571cec3f9cea76?d=https%3A%2F%2Fidenticons.github.com%2Fd54ea80e1dddb765bab019d4dfe36c23.png", "repos_url": "https://api.github.com/users/jrochkind/repos", "received_events_url": "https://api.github.com/users/jrochkind/received_events", "gravatar_id": "6a13e655e637138f8d571cec3f9cea76", "starred_url": "https://api.github.com/users/jrochkind/starred{/owner}{/repo}", "login": "jrochkind", "type": "User", "id": 149304, "followers_url": "https://api.github.com/users/jrochkind/followers"}, "owner": "rails", "_id": {"$oid": "523808b2bd3543c15100cc56"}, "id": 5887633, "issue_url": "https://api.github.com/repos/rails/rails/issues/6416"}
