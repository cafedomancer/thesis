{"issue_url": "https://api.github.com/repos/rails/rails/issues/9704", "repo": "rails", "body": "I prefer the warning method over the error method. Exceptions should be\r\nsaved for exceptional situations where the program cannot or should\r\nnot continue.\r\nThis situation is relatively common, and while it may represent an accident\r\nby the user it may also represent an intentional use case of a Rails Engine\r\ndeveloper.\r\n\r\nOn Friday, May 17, 2013, Trevor Turk wrote:\r\n\r\n> This isn't about security -- it's an effort to help people avoid obscure\r\n> bugs on their apps as I described.\r\n>\r\n> Have you considered adding a configuration option in Devise so the urls\r\n> could be configured from the start instead of overwritten?\r\n>\r\n> I don't think the scope option you propose would work. I would say that\r\n> changing from raising to logging makes sense, but it doesn't add up if we\r\n> decide that overriding routes defined in engines is a legitimate use case.\r\n>\r\n> If we decide to revert this change, please make sure that things work as\r\n> you expect transitioning from Rails 3 to 4, and to make sure the upgrade\r\n> guide explains the change. My testing showed the orders were reversed from\r\n> Rails 3 when routes were defined in routes.rb, but I didn't test with\r\n> engines like Devise.\r\n>\r\n> On May 17, 2013, at 11:33 AM, \"Jos\u00e9 Valim\" <notifications@github.com<javascript:_e({}, 'cvml', 'notifications@github.com');>>\r\n> wrote:\r\n>\r\n> Ok, I have more news about this. Devise allows you default routes with\r\n> default names and since we naturally rely on url helpers, we asked users\r\n> to\r\n> redefine a route with the same name in case they wanted to redirect\r\n> elsewhere. But not anymore with Rails 4.rc. I feel like this pull request\r\n> is hindering legitimate use cases in favor of some limited sense of\r\n> security.\r\n>\r\n> It also feels inconsistent with many other APIs in Ruby (and Rails), where\r\n> redeclaring something extends or overrides the previous behaviour, but\r\n> never raises.\r\n>\r\n> If we are decided to go along this way, I would at least like to support a\r\n> scope option that allows engines and other plugins to say: \"the routes\r\n> defined here may collide with something defined previously but that is\r\n> fine, just give preference to the main one\".\r\n>\r\n> \u2014\r\n> Reply to this email directly or view it on\r\n> GitHub<https://github.com/rails/rails/pull/9704#issuecomment-18072026>\r\n> .\r\n>\r\n> \u2014\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/9704#issuecomment-18073331>\r\n> .\r\n>", "_id": {"$oid": "523d10fbbd354364b90046a8"}, "issue_id": 9704, "url": "https://api.github.com/repos/rails/rails/issues/comments/18074830", "html_url": "https://github.com/rails/rails/pull/9704#issuecomment-18074830", "updated_at": "2013-05-17T17:26:47Z", "user": {"subscriptions_url": "https://api.github.com/users/schneems/subscriptions", "events_url": "https://api.github.com/users/schneems/events{/privacy}", "repos_url": "https://api.github.com/users/schneems/repos", "gists_url": "https://api.github.com/users/schneems/gists{/gist_id}", "url": "https://api.github.com/users/schneems", "login": "schneems", "gravatar_id": "db953d125f5cc49756edb6149f1b813e", "html_url": "https://github.com/schneems", "following_url": "https://api.github.com/users/schneems/following{/other_user}", "received_events_url": "https://api.github.com/users/schneems/received_events", "organizations_url": "https://api.github.com/users/schneems/orgs", "avatar_url": "https://1.gravatar.com/avatar/db953d125f5cc49756edb6149f1b813e?d=https%3A%2F%2Fidenticons.github.com%2F6ef42a6eab211ddd71ac423a80b42d15.png", "starred_url": "https://api.github.com/users/schneems/starred{/owner}{/repo}", "id": 59744, "followers_url": "https://api.github.com/users/schneems/followers", "type": "User"}, "created_at": "2013-05-17T17:26:47Z", "id": 18074830, "owner": "rails"}
