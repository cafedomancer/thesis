{"updated_at": "2013-01-11T12:16:23Z", "repo": "rails", "created_at": "2013-01-11T12:10:37Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/12141731", "id": 12141731, "issue_url": "https://api.github.com/repos/rails/rails/issues/7661", "issue_id": 7661, "user": {"repos_url": "https://api.github.com/users/adamcooke/repos", "type": "User", "html_url": "https://github.com/adamcooke", "starred_url": "https://api.github.com/users/adamcooke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamcooke/subscriptions", "following_url": "https://api.github.com/users/adamcooke/following{/other_user}", "gravatar_id": "ac5a5be2f5803185530feb49ec7bafb3", "organizations_url": "https://api.github.com/users/adamcooke/orgs", "url": "https://api.github.com/users/adamcooke", "gists_url": "https://api.github.com/users/adamcooke/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/ac5a5be2f5803185530feb49ec7bafb3?d=https%3A%2F%2Fidenticons.github.com%2Fcfe795a0a3c7bc1683f2efd8837dde0c.png", "id": 4765, "events_url": "https://api.github.com/users/adamcooke/events{/privacy}", "login": "adamcooke", "received_events_url": "https://api.github.com/users/adamcooke/received_events", "followers_url": "https://api.github.com/users/adamcooke/followers"}, "body": "I have noticed this behaviour when attempting to use an association on the join model in a validation as the record is saved before the association is created and therefore the ID is nil. For example:\r\n\r\n```ruby\r\nclass UserTeam < ActiveRecord::Base\r\n\r\n  belongs_to :user\r\n  belongs_to :team\r\n\r\n  validate do\r\n    if user.account_id != team.account_id\r\n      errors.add :base, \"User and team must belong to the same account\"\r\n    end\r\n  end\r\nend\r\n\r\nteam = Team.new(:name => \"Admins\")\r\nteam.users << Users.find_by_name(\"Adam\")\r\nteam.save\r\n```\r\n\r\nThis save call causes a `undefined method 'account_id' for nil:nilClass` because `team` is nil.\r\n\r\nIf this behaviour is causing people issues it can be removed through monkey patching the class. I haven't extensively tested this however it does resolve the issues in my use-case.\r\n\r\n```ruby\r\nclass ActiveRecord::Associations::HasManyThroughAssociation\r\n  remove_method :concat_records\r\nend\r\n```\r\n\r\nAs this change has affected the way the API operates I would encourage someone to remove this from `3-2-stable` in a 3.2.12 release to avoid any further confusion with users upgrading from older versions of Rails. If necessary, it can be re-added into 4.0 with documentation to note the change of behaviour.\r\n\r\nI have also noticed that this causes the validations to be run three times on the association object. This is documented in issue #8854.", "_id": {"$oid": "5237f947bd3543c15100b40d"}, "html_url": "https://github.com/rails/rails/pull/7661#issuecomment-12141731"}
