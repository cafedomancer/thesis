{"updated_at": "2012-10-09T22:27:06Z", "repo": "rails", "created_at": "2012-10-09T22:27:06Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/9282434", "id": 9282434, "issue_url": "https://api.github.com/repos/rails/rails/issues/7878", "issue_id": 7878, "user": {"repos_url": "https://api.github.com/users/jeremy/repos", "type": "User", "html_url": "https://github.com/jeremy", "starred_url": "https://api.github.com/users/jeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremy/subscriptions", "following_url": "https://api.github.com/users/jeremy/following{/other_user}", "gravatar_id": "24d2f8804e6bb4b7ea6bd11e0a586470", "organizations_url": "https://api.github.com/users/jeremy/orgs", "url": "https://api.github.com/users/jeremy", "gists_url": "https://api.github.com/users/jeremy/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/24d2f8804e6bb4b7ea6bd11e0a586470?d=https%3A%2F%2Fidenticons.github.com%2F84d9ee44e457ddef7f2c4f25dc8fa865.png", "id": 199, "events_url": "https://api.github.com/users/jeremy/events{/privacy}", "login": "jeremy", "received_events_url": "https://api.github.com/users/jeremy/received_events", "followers_url": "https://api.github.com/users/jeremy/followers"}, "body": "Historically, functional and integration tests are both controller tests. Their primary differences lie in their APIs, where they hook in to the Rack stack, and how much state they maintain.\r\n\r\nFunctional tests interact with a bare controller, unencumbered with middleware. You spec out a controller's behavior more intimately, but looking at what exceptions are raised and by which template is rendered. Pretty deep into internal details.\r\n\r\nIntegration tests interact with the Rack stack using an HTTP API:  `get '/messages/123'` and `assert_response :forbidden`. The API is built to interact with your HTTP resources and spec out their behavior. They're hands-off when it comes to controller internals.\r\n\r\nWe'd hoped that the HTTP-oriented integration testing API would eventually take over from the functional testing API, but we haven't really done much to encourage that. The functional testing API works fine, it's easy to think in terms of controller actions rather than URLs, and having access to internals can be convenient. You can go full-on with the integration testing API; never write a functional test. It changes the way you think about what you're testing: the controller vs. the HTTP resource.\r\n\r\nPragmatically speaking, writing tests using the functional API reflects that you're testing the behavior of controller actions. Writing tests using the integration API reflects that you're testing the behavior of HTTP resources.\r\n\r\nBarring deprecating and phasing out the functional API entirely, it's sensible to call functional tests \"controller\" tests and integration tests \"resource\" tests. We should change the resource generators to prefer resource tests over controller tests, too. Encourage thinking in terms of HTTP interaction rather than controller+action state.", "_id": {"$oid": "5237f7febd3543c15100b1a3"}, "html_url": "https://github.com/rails/rails/pull/7878#issuecomment-9282434"}
