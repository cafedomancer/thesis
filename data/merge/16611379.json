{"updated_at": "2013-04-18T21:25:12Z", "repo": "rails", "created_at": "2013-04-18T21:25:12Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/16611379", "id": 16611379, "issue_url": "https://api.github.com/repos/rails/rails/issues/10264", "issue_id": 10264, "user": {"repos_url": "https://api.github.com/users/cconstantine/repos", "type": "User", "html_url": "https://github.com/cconstantine", "starred_url": "https://api.github.com/users/cconstantine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cconstantine/subscriptions", "following_url": "https://api.github.com/users/cconstantine/following{/other_user}", "gravatar_id": "bf08027779fffb8d87653d8f792ed7bf", "organizations_url": "https://api.github.com/users/cconstantine/orgs", "url": "https://api.github.com/users/cconstantine", "gists_url": "https://api.github.com/users/cconstantine/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/bf08027779fffb8d87653d8f792ed7bf?d=https%3A%2F%2Fidenticons.github.com%2Fbfa20d86a59044ef90a4609dde03985c.png", "id": 14189, "events_url": "https://api.github.com/users/cconstantine/events{/privacy}", "login": "cconstantine", "received_events_url": "https://api.github.com/users/cconstantine/received_events", "followers_url": "https://api.github.com/users/cconstantine/followers"}, "body": "I thought so too.\r\n\r\nAccording to http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html  (the same paragraph is in other postgres version pages too):\r\n\r\n> If the configuration parameter standard_conforming_strings is off, then PostgreSQL recognizes backslash escapes in both regular and escape string constants. However, as of PostgreSQL 9.1, the default is on, meaning that backslash escapes are recognized only in escape string constants. This behavior is more standards-compliant, but might break applications which rely on the historical behavior, where backslash escapes were always recognized. As a workaround, you can set this parameter to off, **but it is better to migrate away from using backslash escapes**.  If you need to use a backslash escape to represent a special character, write the string constant with an E.\r\n\r\n\r\nBecause of the bolded part of the docs above I'm not entirely comfortable putting in backslashes to escape the quote characters, but there is another option; I could recursively call back into quote and have the normal quoting system handle converting the ruby object into a postgres compatible string literal.  I've tested this approach and it works too.  Also, the existing string quoting system appears to do what this change does.  \r\n\r\nOn a related note, I there might be a separate issue related to escaping the backslash character.  When I put a backslash in one of the strings in the test array they disappear after going to the db.  This happens when I gsub in another quote character and when I use a recursive quote call.  It might also have to do with how the 'standards_confirming_strings' configuration parameter is set in my setup (stock ubuntu, postgres 9.1).", "_id": {"$oid": "5237e11dbd3543c151008f50"}, "html_url": "https://github.com/rails/rails/pull/10264#issuecomment-16611379"}
