{"updated_at": "2013-02-12T00:55:16Z", "repo": "rails", "created_at": "2013-02-12T00:55:16Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/13412880", "id": 13412880, "issue_url": "https://api.github.com/repos/rails/rails/issues/9207", "issue_id": 9207, "user": {"repos_url": "https://api.github.com/users/willbryant/repos", "type": "User", "html_url": "https://github.com/willbryant", "starred_url": "https://api.github.com/users/willbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willbryant/subscriptions", "following_url": "https://api.github.com/users/willbryant/following{/other_user}", "gravatar_id": "f1c9a2d6b6be7599854a75793ecd872d", "organizations_url": "https://api.github.com/users/willbryant/orgs", "url": "https://api.github.com/users/willbryant", "gists_url": "https://api.github.com/users/willbryant/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/f1c9a2d6b6be7599854a75793ecd872d?d=https%3A%2F%2Fidenticons.github.com%2F60be21f3ebf28ff7b8a692a752d92cf8.png", "id": 12062, "events_url": "https://api.github.com/users/willbryant/events{/privacy}", "login": "willbryant", "received_events_url": "https://api.github.com/users/willbryant/received_events", "followers_url": "https://api.github.com/users/willbryant/followers"}, "body": "I don't think this (or at least the 26e13c3 commit included in 3.1.11) is the right workaround for mysql.\r\n\r\nFirst, looking up columns_hash for all referenced table now means it tries to SHOW FIELDS FROM tables that don't exist whenever you use the join table syntax documented in the 'Table Aliasing' section of the ActiveRecord associations help (look up has_many on api.rubyonrails.org).\r\n\r\nOf course these tables don't actually exist, so the lookup fails, and the join query fails.\r\n\r\nSecondly, doing it only for columns in table is the wrong fix because it doesn't work for comparisons expressions, so you won't realise that you are only protected some of the time.\r\n\r\nIMHO because this is breaking apps upgrading to fix the other security vulnerabilities this should be reverted from 3.1 and 3.2 and have further discussion about the best solution for rails 4.  The announcement about the vulnerability said this would not be fixed in these versions, it's a breaking change, and it only comes up as a vuln if you are allowing JSON or XML parsing or otherwise writing vulnerable code.", "_id": {"$oid": "5237ec25bd3543c151009c4f"}, "html_url": "https://github.com/rails/rails/pull/9207#issuecomment-13412880"}
