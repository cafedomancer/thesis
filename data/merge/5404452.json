{"issue_url": "https://api.github.com/repos/rails/rails/issues/6040", "repo": "rails", "body": "IMHO the way `BigDecimal` objects are currently serialized as strings is not correct and creates more problems than it tries to solve.\r\n\r\nHere's my full reasoning :\r\n\r\nThe change introduced in c1d73270 states that \"a string is the best JSON representation for a BigDecimal\". Which is wrong: the JSON specification simply says that a number is : \"an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part.\" it does not say how, and with which precision these should be deserialized.\r\n\r\nThis behaviour is also based on two other assumptions :\r\n - The parsing libraries will misbehave and treat these as floats,\r\n - Users will have control over the parsing end and will be able to post-process string-wrapped BSs\r\n\r\nSo you can only take advantage of the feature if :\r\n - you have a parsing library that misbehaves, AND\r\n - you are not willing/able to fix/report an issue/replace the misbehaving library AND\r\n - you have control over the parsing end in a way that you can post-process the string\r\n\r\nBut the price to pay is surprising behaviour when you knowinlgy use BDs for arbitrary precision calculations/storage and you try to talk to JSON APIs, and other cases (see pull request #2036).\r\n\r\nSo this feature tries to pro-actively and preventively work-around hypothetical parsing bugs in third-party code at the price of breaking the principle of least suprise.\r\n\r\nI argue that working around hypothetical third-party bugs is not a reason that's good enough to break the principle of least surprise for all of us who use BDs and talk JSON to third-party APIs.\r\n\r\nOne might argue that overriding the default is easy, but that's not a valid point for a bunch of reasons :\r\n - Overriding the default should be required if you want to enable non-standard behaviour, not disable it,\r\n - Overriding currently requires monkey-patching, which is wrong\u2122 \r\n\r\nAnd I'm not just being anal about the monkey-patching part, the recommended official monkey-patch just stopped working as of Rails 3.2, probably because of some lazy/auto loading getting in the way. (See #6033 for a monkey patch that works).\r\n\r\nSo, what IMHO should be in a future major release is as follows :\r\n - Rails should serialize BDs as numbers by default in accordance with the JSON spec \r\n - Parsing libraries should be responsible for their own bugs,\r\n - String-wrapping could remain a configuration option if it doesn't induce breakage elsewhere, (as in #2036 for example)\r\n\r\nSorry if it feels like a rant, it's not <3\r\n\r\nThoughts welcome!", "_id": {"$oid": "52380fc7bd3543c15100d59b"}, "issue_id": 6040, "url": "https://api.github.com/repos/rails/rails/issues/comments/5404452", "html_url": "https://github.com/rails/rails/pull/6040#issuecomment-5404452", "updated_at": "2012-04-29T11:42:27Z", "user": {"subscriptions_url": "https://api.github.com/users/davout/subscriptions", "events_url": "https://api.github.com/users/davout/events{/privacy}", "repos_url": "https://api.github.com/users/davout/repos", "gists_url": "https://api.github.com/users/davout/gists{/gist_id}", "url": "https://api.github.com/users/davout", "login": "davout", "gravatar_id": "dfdb8d531262b99f987902fe25f868c1", "html_url": "https://github.com/davout", "following_url": "https://api.github.com/users/davout/following{/other_user}", "received_events_url": "https://api.github.com/users/davout/received_events", "organizations_url": "https://api.github.com/users/davout/orgs", "avatar_url": "https://1.gravatar.com/avatar/dfdb8d531262b99f987902fe25f868c1?d=https%3A%2F%2Fidenticons.github.com%2F4a59a8ea539613e156495fe26f8e64cd.png", "starred_url": "https://api.github.com/users/davout/starred{/owner}{/repo}", "id": 33329, "followers_url": "https://api.github.com/users/davout/followers", "type": "User"}, "created_at": "2012-04-29T11:42:27Z", "id": 5404452, "owner": "rails"}
