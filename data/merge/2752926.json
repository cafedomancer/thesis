{"updated_at": "2011-11-15T23:01:54Z", "repo": "rails", "created_at": "2011-11-15T23:01:54Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/2752926", "id": 2752926, "issue_url": "https://api.github.com/repos/rails/rails/issues/3636", "issue_id": 3636, "user": {"repos_url": "https://api.github.com/users/joshsusser/repos", "type": "User", "html_url": "https://github.com/joshsusser", "starred_url": "https://api.github.com/users/joshsusser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshsusser/subscriptions", "following_url": "https://api.github.com/users/joshsusser/following{/other_user}", "gravatar_id": "9f0f89bbd9e1ecfbaab6584e429b7a2f", "organizations_url": "https://api.github.com/users/joshsusser/orgs", "url": "https://api.github.com/users/joshsusser", "gists_url": "https://api.github.com/users/joshsusser/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/9f0f89bbd9e1ecfbaab6584e429b7a2f?d=https%3A%2F%2Fidenticons.github.com%2F1c9ac0159c94d8d0cbedc973445af2da.png", "id": 156, "events_url": "https://api.github.com/users/joshsusser/events{/privacy}", "login": "joshsusser", "received_events_url": "https://api.github.com/users/joshsusser/received_events", "followers_url": "https://api.github.com/users/joshsusser/followers"}, "body": "@jonleighton: Good feedback. I think putting all the association methods in one module is a good way to go. If we're comfortable with this level of change and the potential for disruption I can go ahead and work on that. But I do *not* think it's a good idea to combine all AR generated methods into a single module for a model class. That will force a particular order for generating methods that may have name clashes. The example in the Rails test fixtures is computers(:workstation).developer - \"developer\" is the name of both the foreign key field and the belongs_to association. The current order in which those methods get generated breaks the association unless the association methods model/class inherits from the attribute methods module. I think it's better to have a module for attribute methods and a different module for association methods. Offhand I'm not sure what to do for the other kinds of generated methods you mentioned - they might work in one of those modules, or might want to go in another. But I think some kind of precedence ordering should be used, not just the temporal order of method generation.", "_id": {"$oid": "523f5c6ebd354364b9017431"}, "html_url": "https://github.com/rails/rails/pull/3636#issuecomment-2752926"}
