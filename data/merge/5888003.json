{"updated_at": "2012-05-24T00:26:01Z", "repo": "rails", "created_at": "2012-05-24T00:24:43Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/5888003", "id": 5888003, "issue_url": "https://api.github.com/repos/rails/rails/issues/6416", "issue_id": 6416, "user": {"repos_url": "https://api.github.com/users/jrochkind/repos", "type": "User", "html_url": "https://github.com/jrochkind", "starred_url": "https://api.github.com/users/jrochkind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrochkind/subscriptions", "following_url": "https://api.github.com/users/jrochkind/following{/other_user}", "gravatar_id": "6a13e655e637138f8d571cec3f9cea76", "organizations_url": "https://api.github.com/users/jrochkind/orgs", "url": "https://api.github.com/users/jrochkind", "gists_url": "https://api.github.com/users/jrochkind/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/6a13e655e637138f8d571cec3f9cea76?d=https%3A%2F%2Fidenticons.github.com%2Fd54ea80e1dddb765bab019d4dfe36c23.png", "id": 149304, "events_url": "https://api.github.com/users/jrochkind/events{/privacy}", "login": "jrochkind", "received_events_url": "https://api.github.com/users/jrochkind/received_events", "followers_url": "https://api.github.com/users/jrochkind/followers"}, "body": "@pmahoney  Ah, wait, I think I see how you've solved it. \n\nIn my case, the thread 'stealing' the connection, let's call it ThreadX,  wasn't waiting at all. It managed to get scheduled, and do a checkout, in between the signal and when the first waiting thread was actually scheduled. \n\nIn your [_new_ fix](https://github.com/pmahoney/rails/commit/ff1adc0e96bfba36ca8094288341bd667508e662), that ThreadX might still get scheduled in between the signal and when thread1 actually gets scheduled to get the connection it's due -- but it'll see that `@num_waiting` isn't zero, and go to sleep itself with a `wait`, going to the end of the line, instead of 'stealing' the connection. \n\nGenius! \n\nI still don't understand how your original patch, the one actually in this pull, managed to improve things -- although I believe your test results that it did, I just don't understand it!\n\nBut I understand how your new fix manages to improve things quite a bit with `@num_waiting`, nice!  Once this gets into master, I'm really going to want to see if there's a way to backport it to 3-2-stable, to see if it solves my problems in my 3-2 app. ", "_id": {"$oid": "523808b2bd3543c15100cc57"}, "html_url": "https://github.com/rails/rails/pull/6416#issuecomment-5888003"}
