{"updated_at": "2013-05-20T17:22:33Z", "repo": "rails", "created_at": "2013-05-20T17:22:33Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/18160028", "id": 18160028, "issue_url": "https://api.github.com/repos/rails/rails/issues/10673", "issue_id": 10673, "user": {"repos_url": "https://api.github.com/users/sgrif/repos", "type": "User", "html_url": "https://github.com/sgrif", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gravatar_id": "0f674817f8c6e149518f0a4b4ad3d560", "organizations_url": "https://api.github.com/users/sgrif/orgs", "url": "https://api.github.com/users/sgrif", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/0f674817f8c6e149518f0a4b4ad3d560?d=https%3A%2F%2Fidenticons.github.com%2F7f844d9af6961157c094f8d5bbf716a0.png", "id": 1529387, "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "login": "sgrif", "received_events_url": "https://api.github.com/users/sgrif/received_events", "followers_url": "https://api.github.com/users/sgrif/followers"}, "body": "I'm not sure about an example of the Decorator pattern being used with this, but I could definitely see it being a problem.\r\n\r\nI gave the instance method version a try, just to see what the code would look like, and there were two things of note that happened. First was that version runs as much as 10% faster than what is currently on master. However, the test case of adding a handler for Regexp became a good bit uglier, as it now required monkey-patching core classes to add support for one.\r\n\r\n@jferris, as for use cases, I believe @joannecheng had a good one she ran into recently involving using PostGIS and a Location class. I've got a few ideas for some utility class gems that would be much less hacky with this sort of support. (For example, a currency class that normalized whether the database column was an int or float, and always came out as an integer in cents, with a few presentation helpers). We'd also be able to do things like database side encryption much more easily. ", "_id": {"$oid": "523cc514bd354364b90025ef"}, "html_url": "https://github.com/rails/rails/pull/10673#issuecomment-18160028"}
