{"issue_url": "https://api.github.com/repos/rails/rails/issues/7202", "repo": "rails", "body": "The initial idea behind this request was that I felt that it made code obtuse to check for sendability in the calling code all over the place. If there was one place the if condition was not put, then mail could get delivered when you didnt really wish for it to. You essentially have to plug all invokations of mailer actions where deliverability is conditional. After the commit got reverted, I understood my justification for having it might have been a bit weak (boohoo!) and that @josevalim is proscribing that we should just continue to have\n\n````ruby\nif sendable_condition\n  MyMailer.action(params).deliver\nend\n````\n\nI agree it seems wasteful to go thru rendering among other costs if you know you're not going to send the message in the first place and in that @schneems's idea about early return seems appealing.\n\nThinking more on that - Why split deliver and mailer action anyway? What do we gain from it? We still have to ensure that our mailer action always returns a mail object. If your mailer action returns a non-mail object for example, calling deliver on it will bomb. \n\nHow is `.deliver` business logic when it is intrinsic to calling the mailer action? I mean we're basically saying, `Mailer.some_action().deliver` nearly always! Just do away with it and have only `Mailer.some_action()`.\n\nWe could then introduce filters a-la-Controllers which handle/prevent delivery. \n\n````ruby\nclass SomeMailer < ActionMailer::Base\n  # after_filter :deliver # default after_filter\n  after_filter :prevent_spam # Your basic interceptor functionality right here where it should be\n  def some_action(params)\n     return false if params_rule_unsendability\n     # returning false from mailer action automatically breaks the filter chain and no deliver will be performed.\n     # set ivars here\n     # mail here\n     # setting @mail wouldve been better than returning mail obj but that sounds like Rails 2.3 so we'll stick to returning mail obj\n  end\n\n  private\n  \n  def prevent_spam(mail_obj)\n    # if spammy body then return false to break the filter chain\n  end\nend\n````\n\n`deliver` is the default after filter. Interceptors and observers can possibly be done away with and be built into to the filter framework. Pity I cant think of what context would be available to a `before_filter` as yet apart from a global one but that would be a great place to return false from to prevent delivering.\n\n@schneems I agree with you that returning false early from the mailer action should be the end of processing but we're still having to test for the same sendability condition in all (relevant) mailer actions anyway so not sure if it would be super dry but at least it will all be in the same mailer class?", "_id": {"$oid": "5237fe4dbd3543c15100bcf7"}, "issue_id": 7202, "url": "https://api.github.com/repos/rails/rails/issues/comments/7812196", "html_url": "https://github.com/rails/rails/pull/7202#issuecomment-7812196", "updated_at": "2012-08-17T08:08:05Z", "user": {"subscriptions_url": "https://api.github.com/users/asanghi/subscriptions", "events_url": "https://api.github.com/users/asanghi/events{/privacy}", "repos_url": "https://api.github.com/users/asanghi/repos", "gists_url": "https://api.github.com/users/asanghi/gists{/gist_id}", "url": "https://api.github.com/users/asanghi", "login": "asanghi", "gravatar_id": "f4ba063457702c78a7fce6a3529aedb0", "html_url": "https://github.com/asanghi", "following_url": "https://api.github.com/users/asanghi/following{/other_user}", "received_events_url": "https://api.github.com/users/asanghi/received_events", "organizations_url": "https://api.github.com/users/asanghi/orgs", "avatar_url": "https://0.gravatar.com/avatar/f4ba063457702c78a7fce6a3529aedb0?d=https%3A%2F%2Fidenticons.github.com%2F06997f04a7db92466a2baa6ebc8b872d.png", "starred_url": "https://api.github.com/users/asanghi/starred{/owner}{/repo}", "id": 762, "followers_url": "https://api.github.com/users/asanghi/followers", "type": "User"}, "created_at": "2012-08-17T08:08:05Z", "id": 7812196, "owner": "rails"}
