{"updated_at": "2013-02-12T04:40:54Z", "repo": "rails", "created_at": "2013-02-12T04:40:54Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/13417913", "id": 13417913, "issue_url": "https://api.github.com/repos/rails/rails/issues/9207", "issue_id": 9207, "user": {"repos_url": "https://api.github.com/users/willbryant/repos", "type": "User", "html_url": "https://github.com/willbryant", "starred_url": "https://api.github.com/users/willbryant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willbryant/subscriptions", "following_url": "https://api.github.com/users/willbryant/following{/other_user}", "gravatar_id": "f1c9a2d6b6be7599854a75793ecd872d", "organizations_url": "https://api.github.com/users/willbryant/orgs", "url": "https://api.github.com/users/willbryant", "gists_url": "https://api.github.com/users/willbryant/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/f1c9a2d6b6be7599854a75793ecd872d?d=https%3A%2F%2Fidenticons.github.com%2F60be21f3ebf28ff7b8a692a752d92cf8.png", "id": 12062, "events_url": "https://api.github.com/users/willbryant/events{/privacy}", "login": "willbryant", "received_events_url": "https://api.github.com/users/willbryant/received_events", "followers_url": "https://api.github.com/users/willbryant/followers"}, "body": "Trying to figure out what options we have to fix this permanently.\r\n\r\nI'm wondering if we could get away with *always* converting integer and float bind values to strings for mysql.\r\n\r\nThat works in a surprising number of places because most operations can only apply to one type or another (2 + '2' = 4, for example, not '22').  It doesn't give the same behavior in other places like COALESCE typing and so on, so I'm trying to figure out how many cases like that there are to assess the risk.  It would be a problem to change that, but at least it would be \"safe by default\" and you could use SQL literals to bypass the stringifying where you had to, right?\r\n\r\nI don't like it... but that's mysql eh.  At least then we'd be safe by default.\r\n\r\nThoughts?  I would love a better option.\r\n\r\nIf the problem is specific to JSON & XML params then I would like to consider tainting them and stringifying tainted values, and not touching other values.  But would need some careful thought about that too.", "_id": {"$oid": "5237ec25bd3543c151009c58"}, "html_url": "https://github.com/rails/rails/pull/9207#issuecomment-13417913"}
