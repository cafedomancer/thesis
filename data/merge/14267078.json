{"updated_at": "2013-03-01T00:39:46Z", "repo": "rails", "created_at": "2013-03-01T00:39:46Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/14267078", "id": 14267078, "issue_url": "https://api.github.com/repos/rails/rails/issues/9469", "issue_id": 9469, "user": {"repos_url": "https://api.github.com/users/rosenfeld/repos", "type": "User", "html_url": "https://github.com/rosenfeld", "starred_url": "https://api.github.com/users/rosenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rosenfeld/subscriptions", "following_url": "https://api.github.com/users/rosenfeld/following{/other_user}", "gravatar_id": "2abdb50caf0dc5b510330f68b02db8e4", "organizations_url": "https://api.github.com/users/rosenfeld/orgs", "url": "https://api.github.com/users/rosenfeld", "gists_url": "https://api.github.com/users/rosenfeld/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/2abdb50caf0dc5b510330f68b02db8e4?d=https%3A%2F%2Fidenticons.github.com%2F7c3aa93f86af77d8b1071d5fd2b4c91a.png", "id": 32246, "events_url": "https://api.github.com/users/rosenfeld/events{/privacy}", "login": "rosenfeld", "received_events_url": "https://api.github.com/users/rosenfeld/received_events", "followers_url": "https://api.github.com/users/rosenfeld/followers"}, "body": "@pixeltrix I believe that wouldn't work either for what I want... Look, I don't really care if the URL ends up with \".json\" or not. The main reason I started to be concerned about the format is that I realized that when Rails caches some action it doesn't store the response content-type in the cache. So, the first time the action would respond with content-type 'application/json' but next time it would be 'text/html' if I remember correctly. Then I have been told that the cached action will use the content-type based on the format of the request, so I can't use \"format: false\". And the reason why I want to enforce the format is so that I don't forget about it in my client-side applications when calling some action with jQuery.getJSON (which won't run the callback if the wrong content-type is served). Sorry if this is confusing but I couldn't find any way to simplify that... That's why I ended up grouping all my JSON requests (99.9% of all requests) in a scoped block that would set format to true and the format constraint to /json/ to minimize any maintenance pain from my side...", "_id": {"$oid": "5237e8fdbd3543c1510097bc"}, "html_url": "https://github.com/rails/rails/pull/9469#issuecomment-14267078"}
