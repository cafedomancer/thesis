{"updated_at": "2013-02-08T15:22:22Z", "repo": "rails", "created_at": "2013-02-08T15:22:22Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/13294826", "id": 13294826, "issue_url": "https://api.github.com/repos/rails/rails/issues/9216", "issue_id": 9216, "user": {"repos_url": "https://api.github.com/users/al2o3cr/repos", "type": "User", "html_url": "https://github.com/al2o3cr", "starred_url": "https://api.github.com/users/al2o3cr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/al2o3cr/subscriptions", "following_url": "https://api.github.com/users/al2o3cr/following{/other_user}", "gravatar_id": "6883e5ef03484d4fcef507d7b4f1d243", "organizations_url": "https://api.github.com/users/al2o3cr/orgs", "url": "https://api.github.com/users/al2o3cr", "gists_url": "https://api.github.com/users/al2o3cr/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/6883e5ef03484d4fcef507d7b4f1d243?d=https%3A%2F%2Fidenticons.github.com%2Fb20bb95ab626d93fd976af958fbc61ba.png", "id": 1191, "events_url": "https://api.github.com/users/al2o3cr/events{/privacy}", "login": "al2o3cr", "received_events_url": "https://api.github.com/users/al2o3cr/received_events", "followers_url": "https://api.github.com/users/al2o3cr/followers"}, "body": "I'm still seriously confused about how allowing `[]` is a security hole - in the example from @NZKoz, the behavior is identical to what happens if the login token is not present in the database. One presumes that that case is handled in any reasonable program...\r\n\r\nThis also creates an annoying incompatibility with raw ARel - an example:\r\n```ruby\r\n# raises\r\nPost.where(:id => []).count\r\n# works fine, returns 0\r\nPost.where(Post.arel_table[:id].in([])).count\r\n```\r\n\r\nIn addition, this imposes a check on every user of `where` - one that's needed *only* because of the explicit raise. An example:\r\n```ruby\r\n# Group has_many Users\r\n# Post has_many Comments\r\n# Comment belongs_to User\r\nnumber_of_comments_by_group = @post.comments.where(:comments => { :user_id => @group.user_ids }).count\r\n```\r\nWith the old code, this works fine when `@group` has no users - the condition matches no rows, and thus the count is 0 as expected. With this patch, `@group.user_ids` will need to be checked to avoid an `ArgumentError`.\r\n\r\nFWIW, ARel actually explicitly added code to stop generating the `IN (NULL)` clause in this commit:\r\n\r\nhttps://github.com/rails/arel/commit/62207fa\r\n\r\n/cc @spastorino @ernie", "_id": {"$oid": "523d41dabd354364b9005b88"}, "html_url": "https://github.com/rails/rails/pull/9216#issuecomment-13294826"}
