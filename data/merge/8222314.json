{"body": "Would this be an acceptable solution to `#1` ?\n\n```diff\nindex a05a23d..721d67a 100644\n--- a/actionpack/lib/action_dispatch/request/session.rb\n+++ b/actionpack/lib/action_dispatch/request/session.rb\n@@ -80,6 +80,8 @@ module ActionDispatch\n\n       def [](key)\n         load_for_read!\n+        load_for_write! if key.to_s == 'session_id'\n         @delegate[key.to_s]\n       end\n```\n\nSo, if `exists?` fails and there is no persisted id either in the current options or extracted from the\nunpacked_cookie_data, then call load! to generate a new one.\n\nI don't think this can simply be pulled from `options[:id]`. For one, it wouldn't be there for a new session. Second,\nfor a persisted session_id, it would seem that unless the session store is asked to extract this from the\nunpacked_cookie_data, the session id from the rack env would be an id for a session that hasn't been verified against\nthe digest. Which is a bit concerning, since apparently many are currently using `request.session_options[:id]` which I believe would be the same situation.\n\nAnyway, this would still prevent a session load for other keys when there is no active session. Of course, this should\nonly occur when the site is initially accessed or the session cookie is deleted/disabled. FWIW, the call to the\n`csrf_meta_tags` helper call is going to write that token in the session. So unless that's removed, you're going to get\nat least one write op that will force a session load. Of course this happens too late to help with accessing\n`session[:session_id]` in a controller or other view. Honestly I'm not sure if I see a great benefit in distinguishing\nbetween load_for_read/load_for_write, as there's probably very few requests that wouldn't perform at least this one\nwrite to the session.", "url": "https://api.github.com/repos/rails/rails/issues/comments/8222314", "created_at": "2012-09-02T14:17:10Z", "html_url": "https://github.com/rails/rails/pull/7495#issuecomment-8222314", "updated_at": "2012-09-02T14:17:10Z", "repo": "rails", "issue_id": 7495, "user": {"following_url": "https://api.github.com/users/burns/following{/other_user}", "events_url": "https://api.github.com/users/burns/events{/privacy}", "organizations_url": "https://api.github.com/users/burns/orgs", "url": "https://api.github.com/users/burns", "gists_url": "https://api.github.com/users/burns/gists{/gist_id}", "html_url": "https://github.com/burns", "subscriptions_url": "https://api.github.com/users/burns/subscriptions", "avatar_url": "https://1.gravatar.com/avatar/dc03efb58652b74e28722beb5d5c1826?d=https%3A%2F%2Fidenticons.github.com%2F6229c8950a89834489d855c14d32576f.png", "repos_url": "https://api.github.com/users/burns/repos", "received_events_url": "https://api.github.com/users/burns/received_events", "gravatar_id": "dc03efb58652b74e28722beb5d5c1826", "starred_url": "https://api.github.com/users/burns/starred{/owner}{/repo}", "login": "burns", "type": "User", "id": 198303, "followers_url": "https://api.github.com/users/burns/followers"}, "owner": "rails", "_id": {"$oid": "5237fb04bd3543c15100b734"}, "id": 8222314, "issue_url": "https://api.github.com/repos/rails/rails/issues/7495"}
