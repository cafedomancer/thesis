{"updated_at": "2011-08-27T18:44:38Z", "repo": "rails", "created_at": "2011-08-27T18:40:40Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/1920864", "id": 1920864, "issue_url": "https://api.github.com/repos/rails/rails/issues/2711", "issue_id": 2711, "user": {"repos_url": "https://api.github.com/users/tenderlove/repos", "type": "User", "html_url": "https://github.com/tenderlove", "starred_url": "https://api.github.com/users/tenderlove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tenderlove/subscriptions", "following_url": "https://api.github.com/users/tenderlove/following{/other_user}", "gravatar_id": "f29327647a9cff5c69618bae420792ea", "organizations_url": "https://api.github.com/users/tenderlove/orgs", "url": "https://api.github.com/users/tenderlove", "gists_url": "https://api.github.com/users/tenderlove/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/f29327647a9cff5c69618bae420792ea?d=https%3A%2F%2Fidenticons.github.com%2F7c78335a8924215ea5c22fda1aac7b75.png", "id": 3124, "events_url": "https://api.github.com/users/tenderlove/events{/privacy}", "login": "tenderlove", "received_events_url": "https://api.github.com/users/tenderlove/received_events", "followers_url": "https://api.github.com/users/tenderlove/followers"}, "body": "There are a few performance issues going on.  It's possible the runtime could inline the methods (but not likely in MRI).  The main issues are:\r\n\r\n* Stack depth impacts GC time\r\n* paying an extra method call `__send__`\r\n* `*args` contraction (we must build an array that is just GC'd)\r\n* Splatting the args back to the `__send__`\r\n\r\nIn this case, since we know the arity for most of the methods to be 0, we could just use a regular `class_eval` and metaprogram them.  It would shorten the code and be about the same speed as regular method definition:\r\n\r\n```ruby\r\n\r\nrequire 'benchmark'\r\nrequire 'active_support/core_ext/module/delegation'\r\n\r\nclass Target\r\n  def hello; 'world'; end\r\nend\r\n\r\nclass TargetWrapper\r\n  def initialize\r\n    @target = Target.new\r\n  end\r\nend\r\n\r\nclass MethodDelegate < TargetWrapper\r\n  def hello; @target.hello; end\r\nend\r\n\r\nclass MetaDelegate < TargetWrapper\r\n  delegate :hello, :to => :@target\r\nend\r\n\r\nclass EvalDelegate < TargetWrapper\r\n  [ :hello ].each do |method|\r\n    class_eval \"def #{method}; @target.#{method}; end\"\r\n  end\r\nend\r\n\r\nn      = 10_000_000\r\nmethod = MethodDelegate.new\r\nmeta   = MetaDelegate.new\r\nev     = EvalDelegate.new\r\n\r\nBenchmark.bm(7) do |x|\r\n  x.report('method') { n.times { method.hello } }\r\n  x.report('meta')   { n.times { meta.hello } }\r\n  x.report('eval')   { n.times { ev.hello } }\r\nend\r\n```\r\n\r\n```\r\n[aaron@mobile-166-187-073-158 activesupport (master)]$ ruby -I lib del.rb\r\n              user     system      total        real\r\nmethod    5.250000   0.000000   5.250000 (  5.281733)\r\nmeta      7.230000   0.010000   7.240000 (  7.248358)\r\neval      5.590000   0.000000   5.590000 (  5.614715)\r\n[aaron@mobile-166-187-073-158 activesupport (master)]$\r\n```\r\n\r\nI'd prefer we go the `class_eval` route. :-)", "_id": {"$oid": "523840ecbd3543c15101094f"}, "html_url": "https://github.com/rails/rails/pull/2711#issuecomment-1920864"}
