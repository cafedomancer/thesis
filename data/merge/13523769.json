{"updated_at": "2013-02-13T23:17:29Z", "repo": "rails", "created_at": "2013-02-13T23:01:47Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/13523769", "id": 13523769, "issue_url": "https://api.github.com/repos/rails/rails/issues/9274", "issue_id": 9274, "user": {"repos_url": "https://api.github.com/users/KrzysiekJ/repos", "type": "User", "html_url": "https://github.com/KrzysiekJ", "starred_url": "https://api.github.com/users/KrzysiekJ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KrzysiekJ/subscriptions", "following_url": "https://api.github.com/users/KrzysiekJ/following{/other_user}", "gravatar_id": "e057ba7f3b83ef7d925a0d14b0516227", "organizations_url": "https://api.github.com/users/KrzysiekJ/orgs", "url": "https://api.github.com/users/KrzysiekJ", "gists_url": "https://api.github.com/users/KrzysiekJ/gists{/gist_id}", "avatar_url": "https://2.gravatar.com/avatar/e057ba7f3b83ef7d925a0d14b0516227?d=https%3A%2F%2Fidenticons.github.com%2Fde8faf6c21f98ac246b6ce16829ddf76.png", "id": 1598188, "events_url": "https://api.github.com/users/KrzysiekJ/events{/privacy}", "login": "KrzysiekJ", "received_events_url": "https://api.github.com/users/KrzysiekJ/received_events", "followers_url": "https://api.github.com/users/KrzysiekJ/followers"}, "body": "Imagine the following model:\r\n\r\n```ruby\r\nclass Ticket < ActiveRecord::Base\r\n  @priorities = [\"not important\", \"minor\", \"major\", \"very important\"]\r\n\r\n  class << self\r\n    def valid_priority? priority\r\n      @priorities.include? priority\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThen I may want to ease filtering by those priorites, so I write the following code:\r\n\r\n```ruby\r\nclass Ticket\r\n  @priorities.each do |priority|\r\n    scope priority, where(:priority => priority)\r\n  end\r\nend\r\n```\r\n\r\nThis allows me to do things like\r\n\r\n```ruby\r\n@tickets = @tickets.send params[:priority] if Ticket.valid_priority? params[:priority]\r\n```\r\n\r\nwithout caring about string processing of priority names in the views and controllers. It may occur that those scope names won't be hand-typed anywhere in the code, but if there is such need, it still can be done with `send` or by employing `method_missing` to convert dashes to spaces.\r\n\r\nThe above probably isn't a very important and convincing use case, but this functionality is already present in the code \u2014 `delegate_to_scoped_klass` checks if method name looks like `/\\A[a-zA-Z_]\\w*[!?]?\\z/` and if not, it executes different code in module_eval, which calls the method with `send`. It's just the `def` which is written improperly. So my patch isn't essentially adding any new feature, it's just fixing the broken code. If you don't want to support non-standard scope names, then probably this part of code should be removed.", "_id": {"$oid": "523d3e07bd354364b90058f0"}, "html_url": "https://github.com/rails/rails/pull/9274#issuecomment-13523769"}
