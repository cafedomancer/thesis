{"issue_url": "https://api.github.com/repos/rails/rails/issues/3023", "repo": "rails", "body": "Hi Pete, I like what you've proposed, however, is it possible to have\nnested classes in STI where the parent class might not necessarily be at\nthe root of the class tree? E.g. You have:\n\n    Cars\n      Toyota\n        Corolla\n        Corona\n      Mazda\n        626\n        323\n\nEtc.. (I'm not into cars!) :) I'm not sure if STI allows for this as I've\nnever done it myself but it doesn't sound out of the question. This way you\nwon't know which parent to choose.\n\nI had a look through my usages of .becomes in my rails 2.3 project and\nfound this beauty:\n\n    @form.elements.build(:element_type =>\nparams[:element_type].classify).becomes(params[:element_type].classify.constantize)\n\nThe params are sanitized against an allowed list of classes of course! but\nI'm actually only having one controller that can make any of the STI\nsubtypes that it likes. Perhaps I'm doing it bad in the code above but it\nworks.\n\nI also use it outside of STI where I have a fake (not database backed)\nclass that I transform something to for the purposes of a specific\nrequirement in my application. This is probably a bit hacky but again, it\nworks well.\n\nAnyway, just offering up alternate usages so that the final solution isn't\ntoo short sighted. Perhaps there is still a case for a set of methods to\nperform this behavior in Inheritance.\n\n\nOn Wed, Jul 25, 2012 at 1:40 PM, Pete B <\nreply@reply.github.com\n> wrote:\n\n> @brendon I have a similar STI use case as you, but the current state of\n> `becomes` feels pretty neglected and probably belongs in\n> [ActiveRecord::Inheritance](\n> https://github.com/rails/rails/blob/master/activerecord/lib/active_record/inheritance.rb\n> )\n>\n> I'd rather see a method where I don't have to specify the parent class.\n> The only time I've ever used `becomes` has been in views, and I pass in the\n> parent class every time. Maybe I'm missing something, but why would you\n> want it to become something other than its parent?\n>\n> Something like this would be more useful for me:\n>\n> ```ruby\n> class Parent < ActiveRecord::Base; end\n> class Child < Parent; end\n>\n> child = Child.new\n> ```\n>\n> ```erb\n> <%= form_for child.to_sti_parent do %>\n> <% end %>\n> ```\n>\n> ---\n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/3023#issuecomment-7238476\n>", "_id": {"$oid": "523f90c1bd354364b9018da8"}, "issue_id": 3023, "url": "https://api.github.com/repos/rails/rails/issues/comments/7238690", "html_url": "https://github.com/rails/rails/pull/3023#issuecomment-7238690", "updated_at": "2012-07-25T01:56:22Z", "user": {"subscriptions_url": "https://api.github.com/users/brendon/subscriptions", "events_url": "https://api.github.com/users/brendon/events{/privacy}", "repos_url": "https://api.github.com/users/brendon/repos", "gists_url": "https://api.github.com/users/brendon/gists{/gist_id}", "url": "https://api.github.com/users/brendon", "login": "brendon", "gravatar_id": "5cc165c5b9f18bfb64faddb021c82172", "html_url": "https://github.com/brendon", "following_url": "https://api.github.com/users/brendon/following{/other_user}", "received_events_url": "https://api.github.com/users/brendon/received_events", "organizations_url": "https://api.github.com/users/brendon/orgs", "avatar_url": "https://2.gravatar.com/avatar/5cc165c5b9f18bfb64faddb021c82172?d=https%3A%2F%2Fidenticons.github.com%2F40ab5635391fe4ae6b3211682dd4178c.png", "starred_url": "https://api.github.com/users/brendon/starred{/owner}{/repo}", "id": 81871, "followers_url": "https://api.github.com/users/brendon/followers", "type": "User"}, "created_at": "2012-07-25T01:56:22Z", "id": 7238690, "owner": "rails"}
