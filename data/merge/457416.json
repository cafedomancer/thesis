{"body": "It's past midnight here, so I'll be brief:\n\nFrom the first app, a test that failed only in the identity_map branch:\n\n<pre>\nsite = Factory :site\nother_site = Factory :site\nrecruiter = Factory :recruiter, :first_name => \"before-update\", :site_id => site.id\nattrs = Factory.attributes_for(:recruiter, :first_name => \"after-update\", :site_id => other_site.id)\nput :update, :id => recruiter.to_param, :recruiter => attrs\nrecruiter.reload.first_name.should == \"after-update\" # succeeds\nrecruiter.site.should == other_site # fails, still pointing to site, not other_site.\n</pre>\n\nI can't really see what's wrong here and why the first_name field does update, but the site_id doesn't. Especially since it works in 3.0 and rails-master. It might be authentication/authorization that doesn't go quite well, because certain signed in users are not allowed to change the site_id. (I'm using devise, cancan and inherited_resources in this controller).\n\nThe other project has been around for a lot longer (was started with rails 3.0.0.beta, if I remember correctly) and has a lot more gem dependencies.\n\nThere were some errors I can understand that come from the identity map. I have these classes:\n\n<pre>\nclass User &lt; ActiveRecord::Base\nend\nmodule Authentication\n  class User &lt; ::User\n  end\nend\n</pre>\n\nAnd it sometimes picks the wrong one. This pattern sounded really cool when I first heard about it, but caused me nothing but headaches, but that's besides the point.\n\nI got this one a couple of times:\n\n<pre>\nput :update, :project_id => project.id, :id => comment.id, :comment => { :body => \"\" }, :format => :js\nJSON.parse(response.body).should have_key('errors') # fails\n</pre>\n\nAnd some that look like this:\n\n<pre>\nuser = Factory :user\ncomment1 = Factory :comment, :user => user\ncomment2 = Factory :comment, :user => user\nsubject.comments &lt;&lt; comment1 &lt;&lt; comment2\nsubject.save!\nsubject.reload.comments.should == [ comment1, comment2 ]\n</pre>\n\nWhere I get just one comment instead of both. But when I removed the call to `reload` it worked again.\nIt works without the reload in 3.0 too, and I'm not entirely sure why I put it there in the first place. I guess putting reload in is one of the first things I try to do when debugging something.\n\nI guess the majority of failing specs fail because they happened to be accidentally passing before. I found a couple instances where I was testing the wrong object. So I think this update will be a huge improvement and help you find bugs faster than before.\n\nEdit: well, that didn't turn out to be very brief at all! :)", "url": "https://api.github.com/repos/rails/rails/issues/comments/457416", "created_at": "2010-10-08T23:25:09Z", "html_url": "https://github.com/rails/rails/pull/76#issuecomment-457416", "updated_at": "2010-10-08T23:25:57Z", "repo": "rails", "issue_id": 76, "user": {"following_url": "https://api.github.com/users/iain/following{/other_user}", "events_url": "https://api.github.com/users/iain/events{/privacy}", "organizations_url": "https://api.github.com/users/iain/orgs", "url": "https://api.github.com/users/iain", "gists_url": "https://api.github.com/users/iain/gists{/gist_id}", "html_url": "https://github.com/iain", "subscriptions_url": "https://api.github.com/users/iain/subscriptions", "avatar_url": "https://0.gravatar.com/avatar/42ec9fd08c179b547dcb60d977e29941?d=https%3A%2F%2Fidenticons.github.com%2Fd8a3b2dde3181c8257e2e45efbd1e8ae.png", "repos_url": "https://api.github.com/users/iain/repos", "received_events_url": "https://api.github.com/users/iain/received_events", "gravatar_id": "42ec9fd08c179b547dcb60d977e29941", "starred_url": "https://api.github.com/users/iain/starred{/owner}{/repo}", "login": "iain", "type": "User", "id": 12692, "followers_url": "https://api.github.com/users/iain/followers"}, "owner": "rails", "_id": {"$oid": "52386bbabd3543c151012c1a"}, "id": 457416, "issue_url": "https://api.github.com/repos/rails/rails/issues/76"}
