{"updated_at": "2012-03-23T23:12:33Z", "repo": "rails", "created_at": "2012-03-23T23:12:33Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/4669686", "id": 4669686, "issue_url": "https://api.github.com/repos/rails/rails/issues/5329", "issue_id": 5329, "user": {"repos_url": "https://api.github.com/users/mboeh/repos", "type": "User", "html_url": "https://github.com/mboeh", "starred_url": "https://api.github.com/users/mboeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mboeh/subscriptions", "following_url": "https://api.github.com/users/mboeh/following{/other_user}", "gravatar_id": null, "organizations_url": "https://api.github.com/users/mboeh/orgs", "url": "https://api.github.com/users/mboeh", "gists_url": "https://api.github.com/users/mboeh/gists{/gist_id}", "avatar_url": "https://identicons.github.com/830d8cfa42c682e73a8b476c2de17134.png", "id": 35947, "events_url": "https://api.github.com/users/mboeh/events{/privacy}", "login": "mboeh", "received_events_url": "https://api.github.com/users/mboeh/received_events", "followers_url": "https://api.github.com/users/mboeh/followers"}, "body": "\"Ruby doesn't require us to do X so we won't do X\" isn't much of an argument. The Rails contributing guidelines discourage using and/or in favor of &&/|| -- why is this? Not due to any limitation or requirement of the language, but because it's been commonly decided that and/or have confusing semantics.\r\n\r\nReturning truthy/falsy values from predicates rather than true/false is rude. It frequently clutters up IRB/pry/ruby-debug output.\r\n\r\nIt's also unhygienic. It risks breaking encapsulation. Consider this:\r\n\r\n    def party_time?\r\n      @drinks && @emcee\r\n    end\r\n\r\nThis leaks an instance variable which may be a private implementation detail of the class. You have no idea where that return value might end up being stored, considering Ruby's implicit return. You might end up having that object stick around much longer than it is needed, because it's stored somewhere far away from that original method call. So we clean it up:\r\n\r\n    def party_time?\r\n      (@drinks && @emcee).present?\r\n    end\r\n\r\nSo, what, we do this when it's necessary for encapsulation, and not at other times? Inconsistent and easy to apply incorrectly. It's much easier to establish a convention of returning true/false from predicates. It gives your objects a more consistent interface. It protects your implementation details. And it's friendlier to people interacting with the object in a console, or logging the results of that predicate.\r\n\r\n!!value has been derided as cargo-cult programming in the past, but it seems to me that at this point _not_ returning true/false from predicates has become a cargo cult itself. Please reconsider.", "_id": {"$oid": "523819bdbd3543c15100e214"}, "html_url": "https://github.com/rails/rails/pull/5329#issuecomment-4669686"}
