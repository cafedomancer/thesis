{"body": "The use case that specifically got me onto this wouldn't be served well by your proposed solution. I realize this is application specific, but my record set is non-continuous (I often create and delete records). I think having the `max_records` option is more flexible.\r\n\r\nThe same problem exists in either case though -- you need to calculate the indexes to start at manually. In your suggested approach, I think it's more clunky outside of the happy case of a continuous record blocks.\r\n\r\nIf you care about balanced batches:\r\n\r\n```ruby\r\nmax_records = 5000\r\n(0...Post.count).step(max_records) do |offset|\r\n  Post.find_in_batches(:start => Post.offset(offset).limit(1).first.id, :max_records => max_records) do ...\r\nend \r\n```\r\n\r\nvs. \r\n\r\n```ruby\r\nmax_records = 5000\r\nprevious_group_last_id = -1\r\n(0...Post.count).step(max_records).do |offset|\r\n  group_last_id = Post.offset(max_records).limit(1).first.id\r\n  Post.where(id: (previous_group_last_id + 1)..group_last_id).find_in_batches ...\r\n  previous_group_last_id = group_last_id\r\nend\r\n```\r\n(maybe I'm not seeing a cleaner way to do this?)\r\n\r\nI get where you're coming from. And I'm probably not representational of the app-space out there, but for my particular use case, I prefer my approach. That said, I think your suggestion might fit in a bit cleaner and be more intuitive with the overall AR query framework. Going down that road though, maybe something like this would be even more intuitive:\r\n\r\n```ruby\r\nPost.where('id > ?', start_index).limit(max_records).find_in_batches do ...\r\n```\r\n\r\nNone of these seem clearly better than the others to me. \r\n", "url": "https://api.github.com/repos/rails/rails/issues/comments/4893194", "created_at": "2012-04-03T02:27:21Z", "html_url": "https://github.com/rails/rails/pull/5696#issuecomment-4893194", "updated_at": "2012-04-03T02:29:23Z", "repo": "rails", "issue_id": 5696, "user": {"following_url": "https://api.github.com/users/softwaregravy/following{/other_user}", "events_url": "https://api.github.com/users/softwaregravy/events{/privacy}", "organizations_url": "https://api.github.com/users/softwaregravy/orgs", "url": "https://api.github.com/users/softwaregravy", "gists_url": "https://api.github.com/users/softwaregravy/gists{/gist_id}", "html_url": "https://github.com/softwaregravy", "subscriptions_url": "https://api.github.com/users/softwaregravy/subscriptions", "avatar_url": "https://2.gravatar.com/avatar/a88bec2f50dd9f21cd282432cb9e7a92?d=https%3A%2F%2Fidenticons.github.com%2F4c9b5a6919028b0fbe0601f9428681d5.png", "repos_url": "https://api.github.com/users/softwaregravy/repos", "received_events_url": "https://api.github.com/users/softwaregravy/received_events", "gravatar_id": "a88bec2f50dd9f21cd282432cb9e7a92", "starred_url": "https://api.github.com/users/softwaregravy/starred{/owner}{/repo}", "login": "softwaregravy", "type": "User", "id": 426690, "followers_url": "https://api.github.com/users/softwaregravy/followers"}, "owner": "rails", "_id": {"$oid": "523eab4bbd354364b9011d0b"}, "id": 4893194, "issue_url": "https://api.github.com/repos/rails/rails/issues/5696"}
