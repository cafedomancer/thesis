{"body": "On Fri, Dec 16, 2011 at 5:37 PM, Myron Marston\r\n<reply@reply.github.com>\r\nwrote:\r\n\r\n>> The issue here is that your application doesn't rely on completeness being guaranteed for PUT across the web; it's an over-specification of HTTP. If your application does need full PUT (many do), then design and document it that way. I agree it's a good idea to try and make this behaviour easier to achieve in rails.\r\n>\r\n> Actually, my application does rely on it being the complete resource. \u00a0That's how it implements PIT as create or update. \u00a0It wouldn't be able to implement create if it allowed partial resources.\r\n\r\nWhy not?\r\n\r\nI think there's a corner case that involves validation. If I send the\r\nrepresentation of a sub-resource (to avoid the word \"update\") with PUT\r\nI could create the corresponding part of the resource itself.\r\n\r\nFor example, I set the \"paid\" flag of an invoice to \"true\", and if\r\nthere are no validations that is idempotent and makes sense as far as\r\nHTTP is concerned. It is idempotent if I can create an invoice with\r\nthat single attribute, because that PUT request consistently sets the\r\nflag to true. What happens to the rest of the resource among requests\r\nis irrelevant.\r\n\r\nWe are talking about the protocol, not about whether that makes sense\r\nfor a particular application.\r\n\r\nBut if the server refuses to create the invoice because a customer is\r\nmandatory, and accepts the very same request 2 minutes later because\r\nsomeone else created the invoice... I would not call those PUT calls\r\nidempotent, the side-effects of the request are clearly different.", "url": "https://api.github.com/repos/rails/rails/issues/comments/3179594", "created_at": "2011-12-16T16:53:23Z", "html_url": "https://github.com/rails/rails/pull/505#issuecomment-3179594", "updated_at": "2011-12-16T16:53:23Z", "repo": "rails", "issue_id": 505, "user": {"following_url": "https://api.github.com/users/fxn/following{/other_user}", "events_url": "https://api.github.com/users/fxn/events{/privacy}", "organizations_url": "https://api.github.com/users/fxn/orgs", "url": "https://api.github.com/users/fxn", "gists_url": "https://api.github.com/users/fxn/gists{/gist_id}", "html_url": "https://github.com/fxn", "subscriptions_url": "https://api.github.com/users/fxn/subscriptions", "avatar_url": "https://2.gravatar.com/avatar/7223c62b7310e164eb79c740188abbda?d=https%3A%2F%2Fidenticons.github.com%2F4a11654ad1e1e48352252859ff3032a0.png", "repos_url": "https://api.github.com/users/fxn/repos", "received_events_url": "https://api.github.com/users/fxn/received_events", "gravatar_id": "7223c62b7310e164eb79c740188abbda", "starred_url": "https://api.github.com/users/fxn/starred{/owner}{/repo}", "login": "fxn", "type": "User", "id": 3387, "followers_url": "https://api.github.com/users/fxn/followers"}, "owner": "rails", "_id": {"$oid": "52385f14bd3543c151012135"}, "id": 3179594, "issue_url": "https://api.github.com/repos/rails/rails/issues/505"}
