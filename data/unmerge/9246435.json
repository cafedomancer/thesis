{"updated_at": "2012-10-09T03:14:32Z", "repo": "rails", "created_at": "2012-10-09T01:45:40Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/9246435", "id": 9246435, "issue_url": "https://api.github.com/repos/rails/rails/issues/5329", "issue_id": 5329, "user": {"repos_url": "https://api.github.com/users/agraves/repos", "type": "User", "html_url": "https://github.com/agraves", "starred_url": "https://api.github.com/users/agraves/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agraves/subscriptions", "following_url": "https://api.github.com/users/agraves/following{/other_user}", "gravatar_id": "55a209de4a0b6216ef22c1be40295b3a", "organizations_url": "https://api.github.com/users/agraves/orgs", "url": "https://api.github.com/users/agraves", "gists_url": "https://api.github.com/users/agraves/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/55a209de4a0b6216ef22c1be40295b3a?d=https%3A%2F%2Fidenticons.github.com%2Fe1bc55fb92b356f04a9885d51edd0fa2.png", "id": 46964, "events_url": "https://api.github.com/users/agraves/events{/privacy}", "login": "agraves", "received_events_url": "https://api.github.com/users/agraves/received_events", "followers_url": "https://api.github.com/users/agraves/followers"}, "body": "The fact that this method returned 0 instead of true just cost us an hour of head-scratching. \r\n\r\nI understand and totally respect @fxn's points about why 0 is correct, but I see no reason why of all the \"truthy\" values, 0 was chosen, except for the fact that the implementation happened to make it convenient.\r\n\r\nI think the general delineation that fxn points to between truthy and untruthy values is quite wise...I can see how the behavior of .nonzero? benefits from essentially overloading the return value with additional information.\r\n\r\nThe question that clinches it for me, though is: what information are we allowing to bleed through by not casting this down to a boolean? The answer is: where a particular phrase is found within a HTTP header. I cannot think of a situation where a good programmer would leverage that.\r\n\r\nI've always found it important in designing code for other coders to look beyond what is correct towards what is intuitive. The fact that a ton of really intelligent people have found their way here again and again is, to me, a very clear indication that the current behavior, while correct, is suboptimal.\r\n\r\nAnd by the way, the code that distinguishes truthy values from ```true```? The :layout option on Rails' own ```render```...", "_id": {"$oid": "523819bdbd3543c15100e253"}, "html_url": "https://github.com/rails/rails/pull/5329#issuecomment-9246435"}
