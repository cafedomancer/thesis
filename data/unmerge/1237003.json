{"updated_at": "2011-05-25T18:01:01Z", "repo": "rails", "created_at": "2011-05-25T18:00:35Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/1237003", "id": 1237003, "issue_url": "https://api.github.com/repos/rails/rails/issues/1159", "issue_id": 1159, "user": {"repos_url": "https://api.github.com/users/MDaubs/repos", "type": "User", "html_url": "https://github.com/MDaubs", "starred_url": "https://api.github.com/users/MDaubs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MDaubs/subscriptions", "following_url": "https://api.github.com/users/MDaubs/following{/other_user}", "gravatar_id": "e9b949c8749222225501c99e8e8ad9ff", "organizations_url": "https://api.github.com/users/MDaubs/orgs", "url": "https://api.github.com/users/MDaubs", "gists_url": "https://api.github.com/users/MDaubs/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/e9b949c8749222225501c99e8e8ad9ff?d=https%3A%2F%2Fidenticons.github.com%2Fa71c1d3324103addc6c422fa5e374d6f.png", "id": 127900, "events_url": "https://api.github.com/users/MDaubs/events{/privacy}", "login": "MDaubs", "received_events_url": "https://api.github.com/users/MDaubs/received_events", "followers_url": "https://api.github.com/users/MDaubs/followers"}, "body": "Guys - are we sure we aren't re-creating the wheel here?  Using ActiveModel 3.1 we get the same functionality with a nearly identical API.  A \"column coder\" looks a whole lot like an \"authenticator\" to me.  IMO it seems logical to implement this in ActiveModel instead so that the existing column coder API can be leveraged.\n\n    class PasswordCoder\n      def load(value)\n        BCrypt::Password.new(value) if password\n      end\n      def dump(value)\n        BCrypt::Password.create(value).to_s\n      end\n    end\n\n    class User < ActiveRecord::Base\n      serialize :password, PasswordCoder.new\n    end\n\nThis allows password to be set from a string, saved as a BCrypt salt+hash string in the database, and retrieved as a BCrypt::Password that responds to the == operator.  So now...\n\n    User.create(:password => \"SomePassword\").password == \"SomePassword\" # => true\n    User.create(:password => \"SomePassword\").password == \"NotThePassword\" # => false\n\nIt seems to me that if ```has_secure :password``` was simply a macro that implemented the above it'd be super smooth.  Just my two cents.  Please let me know if I'm off base.  Any thoughts?", "_id": {"$oid": "52385c96bd3543c151011f2f"}, "html_url": "https://github.com/rails/rails/pull/1159#issuecomment-1237003"}
