{"issue_url": "https://api.github.com/repos/rails/rails/issues/6524", "repo": "rails", "body": "@josevalim Are you referring to Datamapper 1 or 2? Because my co-worker has written some test code and Datamapper 1 forces the application developer to manage both sides of bi-directional associations. For example:\n\n```ruby\nDataMapper.repository do\n     father = Parent.create :name => \"Sam\"\n\n     jim = Child.new :name => \"Jim\"\n     lisa = Child.new :name => \"Lisa\"\n\n     father.children << jim\n     father.children << lisa\n\n     father.save\n\n     jim.parent = nil\n     jim.save\n\n     assert_equal 2, father.children.size\n\n     father.reload\n     assert_equal 1, father.children.size\n   end\n```\n\nAlso, which bug are you referring to? The one outlined in https://github.com/rails/rails/commit/302c912 is fixed.\n\nI would also mention that if you don't understand how the IdentityMap works, yes you will run into hard to find bugs. But the same applies when you have no IdentityMap. The first time I used Rails, I was expecting an update to a parent object to be seen by all of it's children, but they weren't because the children had references to a *different* instance of the parent.\n\nI think you get strange behaviour either way you go, so why not let the developer choose what kind of strange behaviour they want?\n\nAt one time it seems like the vision for the IdentityMap was for it to be simply dropped into an existing application and have everything work the same, but be faster. I do not think that this vision will ever come to pass. I think that you either write your application with the IM or without it. \n\nTrying to make the semantics of the application the same with or without the IdentityMap makes the IM implementation much more complicated and much more likely to introduce 'strangeness'. Not to mention harder to maintain. Keeping the IM simple with a few simple rules for the application developer to follow seems like a reasonable approach as evidenced by the fact that other major ORMs have gone this route.", "_id": {"$oid": "523e4e93bd354364b900ee78"}, "issue_id": 6524, "url": "https://api.github.com/repos/rails/rails/issues/comments/5989770", "html_url": "https://github.com/rails/rails/pull/6524#issuecomment-5989770", "updated_at": "2012-05-29T17:18:25Z", "user": {"subscriptions_url": "https://api.github.com/users/sskirby/subscriptions", "events_url": "https://api.github.com/users/sskirby/events{/privacy}", "repos_url": "https://api.github.com/users/sskirby/repos", "gists_url": "https://api.github.com/users/sskirby/gists{/gist_id}", "url": "https://api.github.com/users/sskirby", "login": "sskirby", "gravatar_id": "4d4c378e3a10e2d01a636a33c359734c", "html_url": "https://github.com/sskirby", "following_url": "https://api.github.com/users/sskirby/following{/other_user}", "received_events_url": "https://api.github.com/users/sskirby/received_events", "organizations_url": "https://api.github.com/users/sskirby/orgs", "avatar_url": "https://0.gravatar.com/avatar/4d4c378e3a10e2d01a636a33c359734c?d=https%3A%2F%2Fidenticons.github.com%2F6f3e24662182e125fc58299809ee6a67.png", "starred_url": "https://api.github.com/users/sskirby/starred{/owner}{/repo}", "id": 25760, "followers_url": "https://api.github.com/users/sskirby/followers", "type": "User"}, "created_at": "2012-05-29T17:18:25Z", "id": 5989770, "owner": "rails"}
