{"body": "If it were to be added then the best way would be by overriding `Class.new` - this should then work everywhere. If we just added it to nested attributes we'd just end up with new bug reports about it not working with associations etc. It would definitely need to be protected by default and we'd also need to ensure the requested type is a subclass otherwise it could be exploited to return an instance of a different class. \r\n\r\nThere's a possible issue with [`AR::Base.instantiate`][1] in that `alloc` is used rather than `new`, but that already uses `find_sti_class` anyway. We could refactor `instantiate` to become `new` but that runs the risk of people forgetting to call `super` so best to keep them separate. I would imagine the implementation would be something like this:\r\n\r\n``` ruby\r\nmodule ActiveRecord\r\n  class Base\r\n\r\n    # ...\r\n\r\n    def new(attributes = nil, options = {}, &block)\r\n      if inheritance_column_present?(attributes) \r\n      && inheritance_column_accessible(options[:as])\r\n        find_sti_class(attributes[inheritance_column]).new(attributes, options, &block)\r\n      else\r\n        super\r\n      end\r\n    end\r\n\r\n    # ...\r\n\r\n    protected\r\n\r\n    def inheritance_column_present?(attributes)\r\n      attributes && attributes[inheritance_column]\r\n    end\r\n\r\n    def inheritance_column_accessible?(role)\r\n      accessible_attributes(role || :default)\r\n    end\r\n\r\n    # ...\r\n\r\n  end\r\nend\r\n```\r\n\r\nand to actually use it:\r\n\r\n``` ruby\r\nclass Product < ActiveRecord::Base\r\n   attr_accessible :type\r\nend\r\n\r\nProduct.new :type => 'DownloadableProduct'\r\n```\r\n\r\nI would want to see some benchmarks of the overhead of this though since I can remember at least one report of a slowdown in AR instantiation performance between 3.0 and 3.1. I'm pretty sure the block would hurt performance on 1.8.7 significantly.\r\n\r\nI still think the best way to do this is by overriding `Class.new` on a case by case basis. This is inherently more secure and will only result in a performance hit on the classes that need it. There was some discussion about this between myself and @jonleighton during development of the attribute protection scopes in 3.1 which resulted in this commit 42f1ad68655be08a0ff7e5a261d1ad21d3fc90a5, so this functionality does have tests. \r\n\r\n[1]: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/base.rb#L956-975", "url": "https://api.github.com/repos/rails/rails/issues/comments/2880791", "created_at": "2011-11-26T09:48:19Z", "html_url": "https://github.com/rails/rails/pull/3750#issuecomment-2880791", "updated_at": "2011-11-26T09:48:19Z", "repo": "rails", "issue_id": 3750, "user": {"following_url": "https://api.github.com/users/pixeltrix/following{/other_user}", "events_url": "https://api.github.com/users/pixeltrix/events{/privacy}", "organizations_url": "https://api.github.com/users/pixeltrix/orgs", "url": "https://api.github.com/users/pixeltrix", "gists_url": "https://api.github.com/users/pixeltrix/gists{/gist_id}", "html_url": "https://github.com/pixeltrix", "subscriptions_url": "https://api.github.com/users/pixeltrix/subscriptions", "avatar_url": "https://2.gravatar.com/avatar/b14001f2b40640dd6cb63f0e8f1f4869?d=https%3A%2F%2Fidenticons.github.com%2F7cb36e23529e4de4c41460940cc85e6e.png", "repos_url": "https://api.github.com/users/pixeltrix/repos", "received_events_url": "https://api.github.com/users/pixeltrix/received_events", "gravatar_id": "b14001f2b40640dd6cb63f0e8f1f4869", "starred_url": "https://api.github.com/users/pixeltrix/starred{/owner}{/repo}", "login": "pixeltrix", "type": "User", "id": 6321, "followers_url": "https://api.github.com/users/pixeltrix/followers"}, "owner": "rails", "_id": {"$oid": "52383250bd3543c15100f898"}, "id": 2880791, "issue_url": "https://api.github.com/repos/rails/rails/issues/3750"}
