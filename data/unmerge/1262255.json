{"updated_at": "2011-05-30T16:43:12Z", "repo": "rails", "created_at": "2011-05-30T16:43:12Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/1262255", "id": 1262255, "issue_url": "https://api.github.com/repos/rails/rails/issues/1364", "issue_id": 1364, "user": {"repos_url": "https://api.github.com/users/jonleighton/repos", "type": "User", "html_url": "https://github.com/jonleighton", "starred_url": "https://api.github.com/users/jonleighton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonleighton/subscriptions", "following_url": "https://api.github.com/users/jonleighton/following{/other_user}", "gravatar_id": "2940bc7d4506f3e099e3dcc32a412b98", "organizations_url": "https://api.github.com/users/jonleighton/orgs", "url": "https://api.github.com/users/jonleighton", "gists_url": "https://api.github.com/users/jonleighton/gists{/gist_id}", "avatar_url": "https://2.gravatar.com/avatar/2940bc7d4506f3e099e3dcc32a412b98?d=https%3A%2F%2Fidenticons.github.com%2F798cebccb32617ad94123450fd137104.png", "id": 1979, "events_url": "https://api.github.com/users/jonleighton/events{/privacy}", "login": "jonleighton", "received_events_url": "https://api.github.com/users/jonleighton/received_events", "followers_url": "https://api.github.com/users/jonleighton/followers"}, "body": "Hi @bmthykm,\r\n\r\nThanks for the patch. A few comments:\r\n\r\n* Your test is testing that `Foo.first != Foo.last`. It would be better test this positively, e.g. `assert_equal bla, Foo.order(:bla).last`. (I added the order part so that the query always returns the same object.) Make sure that there are multiple records in `Foo.order(:bla)` otherwise we are not really testing anything.\r\n* Please also add a test that tests `reverse_order` directly. You could do this by e.g `assert_equal Foo.order(:bla).to_a.reverse, Foo.order(:bla).reverse_order`.\r\n* Please also add a test that tests two consecutive `reverse_order` calls. E.g. `assert_equal Foo.order(:bla), Foo.order(:bla).reverse_order.reverse_order`\r\n\r\nFinally, with your amendment commit above, please squash it into the previous commit so that people can easily see what's going on when they read the commit log. This is probably going to be easiest if you create a new branch that isn't called master:\r\n\r\n1. Rename your current master branch: `git branch -m master reverse_order_fix`\r\n2. Add the Rails repo as a remote (if you haven't already): `git remote add -f rails git://github.com/rails/rails.git`\r\n3. Pull down rails master into the master branch: `git checkout -t -b master rails/master`\r\n4. Switch to your branch `git checkout reverse_order_fix`\r\n5. Apply your changes on top of the current master: `git rebase master`\r\n6. Finally, use interactive rebase to squash the commits: `git rebase -i master` (it will enter an editor, you can follow the instructions but you basically need to label the second commit with an 's')\r\n7. Then push it to your repo: `git push origin reverse_order_fix`\r\n\r\nIf you want to do patches in future, you just need to checkout your `master` branch, do a `git pull` (to get latest master) and then do a `git checkout -b my_patch_name` to create a branch for your patch. This allows you to keep your `master` branch tracking the real 'master' and have all your patches etc in separate branches which you can rebase if you need to.\r\n\r\nHope that makes sense. Ask away if you have any questions. I am going to close this for now as you will need to create a new pull request once you have renamed your branch.\r\n\r\nJon", "_id": {"$oid": "5238586abd3543c151011c26"}, "html_url": "https://github.com/rails/rails/pull/1364#issuecomment-1262255"}
