{"body": "@NZKoz \r\n>> What do you anticipate being yielded there? 5 batches, of size 200.\r\nYes\r\n>> What happens to the other thousands of People? \r\nYou'd have to make other calls to get them. The param would be most useful when paired with the `:start` option\r\n>> How do you anticipate parallelizing this?\r\nIn conjunction with the `:start` param. Right now, if you have a database with 10_000_000 records, and you need to iterate through them, there's no current way to use the existing batching code to go through them 1_000_000 at a time, say, as you might want to do if you had 10 workers. \r\n\r\nTo further illustrate, building on from my example above and using Delayed::Job as my means of parallelizing:\r\n\r\n```ruby\r\nmax_records = 5000\r\n(0...Post.count).step(max_records) do |offset|\r\n  self.delay.process_chunk(Post.offset(offset).limit(1).first.id, max_records)\r\nend \r\n\r\ndef process_chunk(start_id, max_records)\r\n  Post.find_in_batches(:start => start_id, :max_records => max_records) do |batch|\r\n    #something with the batch here\r\n  end \r\nend\r\n```\r\n(Delayed::Job uses the `delay` keyword to basically fork off a job to a worker's queue, so in my example each worker would get the `process_chunk` method with a different `start_id`)\r\n", "url": "https://api.github.com/repos/rails/rails/issues/comments/4894007", "created_at": "2012-04-03T03:57:56Z", "html_url": "https://github.com/rails/rails/pull/5696#issuecomment-4894007", "updated_at": "2012-04-03T03:57:56Z", "repo": "rails", "issue_id": 5696, "user": {"following_url": "https://api.github.com/users/softwaregravy/following{/other_user}", "events_url": "https://api.github.com/users/softwaregravy/events{/privacy}", "organizations_url": "https://api.github.com/users/softwaregravy/orgs", "url": "https://api.github.com/users/softwaregravy", "gists_url": "https://api.github.com/users/softwaregravy/gists{/gist_id}", "html_url": "https://github.com/softwaregravy", "subscriptions_url": "https://api.github.com/users/softwaregravy/subscriptions", "avatar_url": "https://2.gravatar.com/avatar/a88bec2f50dd9f21cd282432cb9e7a92?d=https%3A%2F%2Fidenticons.github.com%2F4c9b5a6919028b0fbe0601f9428681d5.png", "repos_url": "https://api.github.com/users/softwaregravy/repos", "received_events_url": "https://api.github.com/users/softwaregravy/received_events", "gravatar_id": "a88bec2f50dd9f21cd282432cb9e7a92", "starred_url": "https://api.github.com/users/softwaregravy/starred{/owner}{/repo}", "login": "softwaregravy", "type": "User", "id": 426690, "followers_url": "https://api.github.com/users/softwaregravy/followers"}, "owner": "rails", "_id": {"$oid": "523eab4bbd354364b9011d0d"}, "id": 4894007, "issue_url": "https://api.github.com/repos/rails/rails/issues/5696"}
