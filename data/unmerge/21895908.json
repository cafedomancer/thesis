{"body": ":-1: we should do this differently.\r\n\r\nYou're changing the escaping methods here, and changing the tests, and changing the intention of what this method is used for. At the very least this would *not* be suitable for backporting to the 4.0 series and would have to live in master until 4.1 ships after a long painful beta series :)\r\n\r\nThe whole rationale for and method of using json_escape is kind of broken.  When you're escaping values you need to work at the components, not the document as a whole.  So with JSON this means escaping has to happen to the contents of the strings in JSON, not the document as a whole.  It's the same reason you need to escape every fragment of html you generate and components of an SQL query, you can't just do:\r\n\r\n```ruby\r\n  response.body = h(response.body)\r\n  sql = connection.escape_some_how(entire_sql)\r\n```\r\n\r\nThe reason it strips your `\"` chars is that it can't possibly tell the difference between a `\"` in user provided data and one in the json that you want to keep.  Clearly the helper isn't fit for purpose, and can't be made so.\r\n\r\nSo going back to what people want to do, ideally it's this:\r\n\r\n```erb\r\n<script>\r\n  var someThing = <%= @some_thing.to_json %>;\r\n</script>\r\n```\r\n\r\nWhich they can do if they remember to set `escape_html_entities_in_json` which is [weirdly implemented and poorly documented](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/json/encoding.rb#L127-L134).  However they'll still have to call `raw` or `html_safe` to have it output correctly.  There's really no reason for turning this option off, the strings are still perfectly valid JSON, it's just encoded differently.\r\n\r\nSo if we're going to go to the trouble of changing all this escaping, and we should, I'd suggest:\r\n\r\n1. _always_ escape the html entities in json, remove that option\r\n2.  make the encoded json be `html_safe` as we know the values are safe for inclusion in the body of the document at that point.\r\n\r\nThe only issue that would raise from my POV would be someone doing something crazy like:\r\n\r\n```erb\r\n<div id='something' json-in-attribute-for-some-reason=\"<%= @something.to_json %>\">\r\n```\r\n\r\nI'm not sure if there'd be an attack vector there, it'd be worth investigating?  Would that solve the issues people asked about in #6094 ?\r\n\r\n\r\n\r\n", "url": "https://api.github.com/repos/rails/rails/issues/comments/21895908", "created_at": "2013-07-31T21:09:20Z", "html_url": "https://github.com/rails/rails/pull/11526#issuecomment-21895908", "updated_at": "2013-07-31T21:09:20Z", "repo": "rails", "issue_id": 11526, "user": {"following_url": "https://api.github.com/users/NZKoz/following{/other_user}", "events_url": "https://api.github.com/users/NZKoz/events{/privacy}", "organizations_url": "https://api.github.com/users/NZKoz/orgs", "url": "https://api.github.com/users/NZKoz", "gists_url": "https://api.github.com/users/NZKoz/gists{/gist_id}", "html_url": "https://github.com/NZKoz", "subscriptions_url": "https://api.github.com/users/NZKoz/subscriptions", "avatar_url": "https://2.gravatar.com/avatar/efa76b164a7de4a5730e4fa397cc4425?d=https%3A%2F%2Fidenticons.github.com%2F85d8ce590ad8981ca2c8286f79f59954.png", "repos_url": "https://api.github.com/users/NZKoz/repos", "received_events_url": "https://api.github.com/users/NZKoz/received_events", "gravatar_id": "efa76b164a7de4a5730e4fa397cc4425", "starred_url": "https://api.github.com/users/NZKoz/starred{/owner}{/repo}", "login": "NZKoz", "type": "User", "id": 197, "followers_url": "https://api.github.com/users/NZKoz/followers"}, "owner": "rails", "_id": {"$oid": "5237d388bd3543c151007f92"}, "id": 21895908, "issue_url": "https://api.github.com/repos/rails/rails/issues/11526"}
