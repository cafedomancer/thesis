{"updated_at": "2012-05-25T15:49:39Z", "repo": "rails", "created_at": "2012-05-25T15:47:54Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/5933710", "id": 5933710, "issue_url": "https://api.github.com/repos/rails/rails/issues/6488", "issue_id": 6488, "user": {"repos_url": "https://api.github.com/users/pmahoney/repos", "type": "User", "html_url": "https://github.com/pmahoney", "starred_url": "https://api.github.com/users/pmahoney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmahoney/subscriptions", "following_url": "https://api.github.com/users/pmahoney/following{/other_user}", "gravatar_id": "27598e1b77ce41fb0bd8a6fc4a3715d4", "organizations_url": "https://api.github.com/users/pmahoney/orgs", "url": "https://api.github.com/users/pmahoney", "gists_url": "https://api.github.com/users/pmahoney/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/27598e1b77ce41fb0bd8a6fc4a3715d4?d=https%3A%2F%2Fidenticons.github.com%2F55d630b2da03cc33c4e3f00c113d14d7.png", "id": 103822, "events_url": "https://api.github.com/users/pmahoney/events{/privacy}", "login": "pmahoney", "received_events_url": "https://api.github.com/users/pmahoney/received_events", "followers_url": "https://api.github.com/users/pmahoney/followers"}, "body": "> I think you said that if multiple threads were waiting, #signal would always wake up the one that was waiting the longest (verified in both jruby and mri?) -- what prevents strict fairness from being implemented?\n\nYes, that is true.  By \"not strict\" I mean that if *two* connections become available at the same time, and thread1 and thread2 are waiting in line, the order in which they re-acquire the monitor is not guaranteed (but thread3 will not be able to \"steal\" because `@num_waiting` check forces it to wait).\n\n> What's the @cond.broadcast needed for?\n\nI don't see this in the diff.  There was a `broadcast` in the original patch, but this new one should have removed it, unless I missed one.", "_id": {"$oid": "52380786bd3543c15100cadb"}, "html_url": "https://github.com/rails/rails/pull/6488#issuecomment-5933710"}
