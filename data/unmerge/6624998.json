{"updated_at": "2012-06-28T09:11:25Z", "repo": "rails", "created_at": "2012-06-28T09:11:25Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/6624998", "id": 6624998, "issue_url": "https://api.github.com/repos/rails/rails/issues/6826", "issue_id": 6826, "user": {"repos_url": "https://api.github.com/users/apotonick/repos", "type": "User", "html_url": "https://github.com/apotonick", "starred_url": "https://api.github.com/users/apotonick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apotonick/subscriptions", "following_url": "https://api.github.com/users/apotonick/following{/other_user}", "gravatar_id": "0fe13386ba69a128e9fadc19ae9d96be", "organizations_url": "https://api.github.com/users/apotonick/orgs", "url": "https://api.github.com/users/apotonick", "gists_url": "https://api.github.com/users/apotonick/gists{/gist_id}", "avatar_url": "https://2.gravatar.com/avatar/0fe13386ba69a128e9fadc19ae9d96be?d=https%3A%2F%2Fidenticons.github.com%2Fda97f65bd113e490a5fab20c4a69f586.png", "id": 10406, "events_url": "https://api.github.com/users/apotonick/events{/privacy}", "login": "apotonick", "received_events_url": "https://api.github.com/users/apotonick/received_events", "followers_url": "https://api.github.com/users/apotonick/followers"}, "body": "Thanks for that discussion!!! I appreciate that. This might look like a ridiculous problem but actually it reflects a code design style issue in Rails.\n\nThe `#prepare` is absolutely not useless but guides people towards interfaces.\n\nWhat you do now is improving AV (since it doesn't know about `routes` internals anymore) but moving internal knowledge about AV into the controller (since it actively includes modules into AV). If we were using a \"useless\" #prepare method all the controller knows is \"AV wants me to pass modules needed in the view\" and AV knows \"I get modules in #prepare and I do whatever I want with it\".\n\nWhich brings us to the second point. If we want to add stuff to the preparation process now people will simply chug that into the #view_context_class breaking encapsulation again. Instead, we should think about an interface between AV and AC. E.g. #prepare accepting a block or whatever.\n\nThe point is we are working towards making AV replaceable. Now if the controller keeps monkey-patching the view class this makes our efforts useless. Do you now understand my pain?", "_id": {"$oid": "523803c3bd3543c15100c4b4"}, "html_url": "https://github.com/rails/rails/pull/6826#issuecomment-6624998"}
