{"updated_at": "2011-04-11T00:52:33Z", "repo": "rails", "created_at": "2011-04-11T00:52:33Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/981724", "id": 981724, "issue_url": "https://api.github.com/repos/rails/rails/issues/258", "issue_id": 258, "user": {"repos_url": "https://api.github.com/users/patmaddox/repos", "type": "User", "html_url": "https://github.com/patmaddox", "starred_url": "https://api.github.com/users/patmaddox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patmaddox/subscriptions", "following_url": "https://api.github.com/users/patmaddox/following{/other_user}", "gravatar_id": "39100495c9937c39b2e0c704444e1b4a", "organizations_url": "https://api.github.com/users/patmaddox/orgs", "url": "https://api.github.com/users/patmaddox", "gists_url": "https://api.github.com/users/patmaddox/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/39100495c9937c39b2e0c704444e1b4a?d=https%3A%2F%2Fidenticons.github.com%2Fb59c67bf196a4758191e42f76670ceba.png", "id": 1111, "events_url": "https://api.github.com/users/patmaddox/events{/privacy}", "login": "patmaddox", "received_events_url": "https://api.github.com/users/patmaddox/received_events", "followers_url": "https://api.github.com/users/patmaddox/followers"}, "body": "I'd like to point out that the meaning of #either? was initially very confusing to me. My best guess at why it was named #either? was somewhat similar to #inject ... that it is idiomatic in functional programming, or carries over from some other language or paradigm. But as far as communicating intent goes, it went absolutely over my head. If the point is to ask an object whether it is one of a list of items, then I think foo.one_of?(1, 2, 3) makes a lot more sense to me. Or maybe #either_of? That reads more naturally to me, but I tend to prefer slightly more verbose method names than keeping them super terse, so that may just be a matter of personal preference.\r\n\r\nI just spent a few minutes looking over the diff where include? was changed to in? or either?. I have to say, I do like it. I agree with David's comment about it making the important object front and center. The one criticism I have is that by adding these two new methods, you are adding to the body of stuff that programmers have to learn and remember. The distinction between these two methods is sensible to me - #in? is asking about a pre-existing collection, so that's made explicit. #Either? is asking about an abitrary list of objects, so that uses the splat. I remember when I was first getting into Rails, splat arguments caused me a lot of confusion. I'm better off for figuring them out though :)\r\n\r\nI guess the question is, is the added expressiveness for seasoned Rails folks worth increasing the burden on beginning Ruby and Rails developers (and of course, whether there really *is* any added expressiveness, which in my opinion is yes). I\u2019ll leave that up to you to sort out. In the mean time, I\u2019ll just toss these into some pairing sessions and see how people react :)", "_id": {"$oid": "52386422bd3543c1510125a7"}, "html_url": "https://github.com/rails/rails/pull/258#issuecomment-981724"}
