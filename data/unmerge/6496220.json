{"updated_at": "2012-06-21T22:42:08Z", "repo": "rails", "created_at": "2012-06-21T22:29:44Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/6496220", "id": 6496220, "issue_url": "https://api.github.com/repos/rails/rails/issues/6685", "issue_id": 6685, "user": {"repos_url": "https://api.github.com/users/kenn/repos", "type": "User", "html_url": "https://github.com/kenn", "starred_url": "https://api.github.com/users/kenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenn/subscriptions", "following_url": "https://api.github.com/users/kenn/following{/other_user}", "gravatar_id": "f3c42aa7989a9a0c37709abc08a6327f", "organizations_url": "https://api.github.com/users/kenn/orgs", "url": "https://api.github.com/users/kenn", "gists_url": "https://api.github.com/users/kenn/gists{/gist_id}", "avatar_url": "https://2.gravatar.com/avatar/f3c42aa7989a9a0c37709abc08a6327f?d=https%3A%2F%2Fidenticons.github.com%2F20d749bc05f47d2bd3026ce457dcfd8e.png", "id": 10350, "events_url": "https://api.github.com/users/kenn/events{/privacy}", "login": "kenn", "received_events_url": "https://api.github.com/users/kenn/received_events", "followers_url": "https://api.github.com/users/kenn/followers"}, "body": "@tarcieri that's exactly my point, eager loading would benefit users of CoW GC, and it would cancel out the benefit of using multi-threaded envs for less memory consumption. Even better, forking multi-process have true concurrency utilizing multi-cores on MRIs with GIL. My point is that, by the time truly CoW-friendly GC is available on MRI, writing thread-safe code - again, I'd strees that's **for request concurrency** - would be less beneficial, just adding code complexity.\n\nBut practically speaking, I wouldn't hope too much on CoW-friendly GC to work 100% as advertised, so I'd imagine myself using Puma for some projects, Unicorn for the other, and of course Celluloid for some. :)", "_id": {"$oid": "52380552bd3543c15100c72b"}, "html_url": "https://github.com/rails/rails/pull/6685#issuecomment-6496220"}
