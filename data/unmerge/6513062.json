{"updated_at": "2012-06-22T17:11:26Z", "repo": "rails", "created_at": "2012-06-22T17:09:42Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/6513062", "id": 6513062, "issue_url": "https://api.github.com/repos/rails/rails/issues/6685", "issue_id": 6685, "user": {"repos_url": "https://api.github.com/users/tarcieri/repos", "type": "User", "html_url": "https://github.com/tarcieri", "starred_url": "https://api.github.com/users/tarcieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tarcieri/subscriptions", "following_url": "https://api.github.com/users/tarcieri/following{/other_user}", "gravatar_id": "4131d2f57a0db2a2b4d9a62bd389fd44", "organizations_url": "https://api.github.com/users/tarcieri/orgs", "url": "https://api.github.com/users/tarcieri", "gists_url": "https://api.github.com/users/tarcieri/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/4131d2f57a0db2a2b4d9a62bd389fd44?d=https%3A%2F%2Fidenticons.github.com%2Fbeb22fb694d513edcf5533cf006dfeae.png", "id": 797, "events_url": "https://api.github.com/users/tarcieri/events{/privacy}", "login": "tarcieri", "received_events_url": "https://api.github.com/users/tarcieri/received_events", "followers_url": "https://api.github.com/users/tarcieri/followers"}, "body": "@kenn \"If average response time is 50ms...\"\n\nI don't know what Rails apps you work on, but I have never worked on any site where the mean response time was 50ms. It has typically been much higher than that.\n\n@rosenfeld \"Some requests could be consuming third-party APIs like Twitter, FB or GitHub\"\n\nWant an example of APIs that are extremely important but notoriously slow? Payment gateways. Imagine it takes 5 seconds to process a payment (this is not unrealistic). Imagine you have 16 Unicorn workers on a given server (let's say 4 cores). This means with only 16 payment processing requests you have completely exhausted the capacity of this server, which is going to be sitting there idle while the payment gateway continues processing those requests.\n\nNow let's say we use 10 threads per worker instead, and one worker per CPU instead of 4. We can now process 40 payments requests simultaneously on this same server.\n\nThese are not unrealistic numbers in either respect. Threads make concurrency cheaper.\n\n@kenn \"A connection in the database is much more serious than ruby concurrency.\"\n\nI work on a very, very large Rails web site. Our main bottleneck right now is the CPU time spent in the garbage collector. Trying to eke out additional concurrency via REE processes (even with CoW) is not possible because we do not have the CPU capacity available thanks to GC time.\n\nDatabase connection concurrency is a comparatively minor issue.", "_id": {"$oid": "52380552bd3543c15100c740"}, "html_url": "https://github.com/rails/rails/pull/6685#issuecomment-6513062"}
