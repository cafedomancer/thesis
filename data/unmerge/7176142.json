{"body": "Actually, I just noticed the problem is more wide-spread than I think. Consider this:\n\n```ruby\n'optical mouse' # => \"optical mouses\" (instead of \"optical mice\")\n```\n\nThis is broken since 16e7f2f809c586d2d9a27c2b57395350b596e0b7 (see #5177). The root of the problem is we don't have a clear spec on what arguments are considered \"fair game\" for the inflectors.\n\nI did a little bit of digging. Pretty much since [the beginning of time](https://github.com/rails/rails/blob/dc3d6eb9b4aaed051dd6d5a5a07f6c66b72da4c4/activesupport/lib/active_support/inflector.rb#L38) (dc3d6eb9b4aaed051dd6d5a5a07f6c66b72da4c4), `pluralize` was expected to support multi-word strings separated by underscores. However, this is not really documented explicitly so everyone forgot about it. And then we started adding inflector rules that [expects the input to be a single-word strings](https://github.com/rails/rails/commit/64612db7cf85aee8434e7b9b4fd8d6d0249c60e4#L1R62) (note the `/^...$/i`). Overtime more and more such rules were added. And then [at some point](https://github.com/chancancode/rails/commit/6714b39a133bb8da1b4f6f485f35494ff8ad87ab#L3R90), we started assumeing pluralize/singularize should take on `CamelCase` strings as well.  Eventually [everyone forget about](https://github.com/rails/rails/commit/54c18564252e46bf2f270bf42c0be06033631d9b) `pluralize`'s double duty. \n\nSo basically, no one really knows what `singularize`/`pluralize` should do, and the fact that `tableize` worked okay all along (on most inputs anyways) is more or less a miracle.\n\nI can update the PR to address this, but we will have to first agree on which of the followings is the \"right\" fix:\n\n1. \"`singularize`/`pluralize` is supposed to take phrases\": Fix the inflector rules to drop all usage of `/^.../i` and replace them with a lookahead of something (because we already know `\\b` doesn't work).\n\n2. \"`singularize`/`pluralize` is supposed to take phrases, but inflector rules are supposed to operate on a single word\": Then change `apply_inflection` to match the rules on the last word in the input.\n\n3. \"`singularize`/`pluralize` is supposed to take a single word only\": Then change `tableize`, update the docs and drop the unnecessary tests.\n\n4. \"Admit that the inflector is broken/inconsistent, but is too big to fail at this point\": Do nothing.\n\nNone of these options is ideal. 4 might be most backwards-compatible, but we already broke backwards compatibility in 16e7f2f809c586d2d9a27c2b57395350b596e0b7, we might as well fix this once and for all in Rails 4.\n\nYou could, in theory, fix all of these problems by adding custom inflector rules, but it's not trivial. For example, let's say you need an 'Admin::CustomerInformation' model. To work around this bug one might try:\n\n```ruby\nActiveSupport::Inflector.inflections do |inflect|\n  inflect.uncountable \"information\" # Wrong. The inflector already know this.\n\n  inflect.uncountable \"customer_information\" # Also wrong. tableize('admin_customer_information') doesn't work.\n\n  inflect.plural /customer_information$/i, \"customer_information\" # Almost. But 'CustomerInformation'.pluralize won't work, if you ever need to do that.\n\n  inflect.plural /(information)$/i, \"\\1\" # Bingo! (Actually, this has the suffix problem that @josevalim mentioned...)\nend\n```\n\nAnd things like \"stinky fish\", \"optical mouse\" would each require pretty different hacks to make them work. My point is, working around this requires a far amount of knowledge to the internals of the Inflector, and offloading this to the users seems like asking a little bit too much IMO.\n\nPerfect example of [hydra code](http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html)?", "url": "https://api.github.com/repos/rails/rails/issues/comments/7176142", "created_at": "2012-07-23T12:02:07Z", "html_url": "https://github.com/rails/rails/pull/7134#issuecomment-7176142", "updated_at": "2012-07-23T19:45:41Z", "repo": "rails", "issue_id": 7134, "user": {"following_url": "https://api.github.com/users/chancancode/following{/other_user}", "events_url": "https://api.github.com/users/chancancode/events{/privacy}", "organizations_url": "https://api.github.com/users/chancancode/orgs", "url": "https://api.github.com/users/chancancode", "gists_url": "https://api.github.com/users/chancancode/gists{/gist_id}", "html_url": "https://github.com/chancancode", "subscriptions_url": "https://api.github.com/users/chancancode/subscriptions", "avatar_url": "https://1.gravatar.com/avatar/22bb3e56828870ee9a0dd93aeadbe04a?d=https%3A%2F%2Fidenticons.github.com%2F8b407b57d02a2e41c7ba54441391d9ce.png", "repos_url": "https://api.github.com/users/chancancode/repos", "received_events_url": "https://api.github.com/users/chancancode/received_events", "gravatar_id": "22bb3e56828870ee9a0dd93aeadbe04a", "starred_url": "https://api.github.com/users/chancancode/starred{/owner}{/repo}", "login": "chancancode", "type": "User", "id": 55829, "followers_url": "https://api.github.com/users/chancancode/followers"}, "owner": "rails", "_id": {"$oid": "5237ff99bd3543c15100be63"}, "id": 7176142, "issue_url": "https://api.github.com/repos/rails/rails/issues/7134"}
