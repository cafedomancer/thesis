{"updated_at": "2011-05-21T12:59:17Z", "repo": "rails", "created_at": "2011-05-21T12:45:08Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/1214307", "id": 1214307, "issue_url": "https://api.github.com/repos/rails/rails/issues/1166", "issue_id": 1166, "user": {"repos_url": "https://api.github.com/users/Roman2K/repos", "type": "User", "html_url": "https://github.com/Roman2K", "starred_url": "https://api.github.com/users/Roman2K/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Roman2K/subscriptions", "following_url": "https://api.github.com/users/Roman2K/following{/other_user}", "gravatar_id": "4eb0a12aa5eaf310102607fdf2274726", "organizations_url": "https://api.github.com/users/Roman2K/orgs", "url": "https://api.github.com/users/Roman2K", "gists_url": "https://api.github.com/users/Roman2K/gists{/gist_id}", "avatar_url": "https://2.gravatar.com/avatar/4eb0a12aa5eaf310102607fdf2274726?d=https%3A%2F%2Fidenticons.github.com%2Fb06b5541a62ed438f956b662b4e1ec28.png", "id": 2480, "events_url": "https://api.github.com/users/Roman2K/events{/privacy}", "login": "Roman2K", "received_events_url": "https://api.github.com/users/Roman2K/received_events", "followers_url": "https://api.github.com/users/Roman2K/followers"}, "body": "No offense, but this is some poorly written piece of code. Most notable errors to me:\n\n* The use of `#inject` must have originated from a good intention, but if you have to `break` inside the block, it's making it more complicated than it should be. Using `#all?` would break as soon as the block would return false, in addition to resulting in a more concise code.\n* A ternary operation to return either `true` or `false`!?\n* If this method is added, it must be available for all numeric values, not just integers. Regardless of whether a numeric value is a `Float` or an `Integer`, one would expect it to respond to `#multiple_of?` with no prior cast to an `Integer`.\n\nThe whole method could be reduced to a single line:\n\n```ruby\nclass Numeric\n  def multiple_of?(*numbers)\n    zero? || numbers.all? { |n| n.nonzero? && modulo(n).zero? }\n  end\nend\n```\nThe gist with a small inline test: https://gist.github.com/984482", "_id": {"$oid": "52385c6dbd3543c151011ef1"}, "html_url": "https://github.com/rails/rails/pull/1166#issuecomment-1214307"}
