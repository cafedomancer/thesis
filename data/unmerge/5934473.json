{"updated_at": "2012-05-25T16:22:07Z", "repo": "rails", "created_at": "2012-05-25T16:22:07Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/5934473", "id": 5934473, "issue_url": "https://api.github.com/repos/rails/rails/issues/6488", "issue_id": 6488, "user": {"repos_url": "https://api.github.com/users/jrochkind/repos", "type": "User", "html_url": "https://github.com/jrochkind", "starred_url": "https://api.github.com/users/jrochkind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrochkind/subscriptions", "following_url": "https://api.github.com/users/jrochkind/following{/other_user}", "gravatar_id": "6a13e655e637138f8d571cec3f9cea76", "organizations_url": "https://api.github.com/users/jrochkind/orgs", "url": "https://api.github.com/users/jrochkind", "gists_url": "https://api.github.com/users/jrochkind/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/6a13e655e637138f8d571cec3f9cea76?d=https%3A%2F%2Fidenticons.github.com%2Fd54ea80e1dddb765bab019d4dfe36c23.png", "id": 149304, "events_url": "https://api.github.com/users/jrochkind/events{/privacy}", "login": "jrochkind", "received_events_url": "https://api.github.com/users/jrochkind/received_events", "followers_url": "https://api.github.com/users/jrochkind/followers"}, "body": "Okay, I _think_ i understand the fairness issue, and it seems pretty damn good. Def understand the issue where it's unpredictable which thread will get the lock first -- that's what requires the `@num_waiting` in the first place. And I understand how that guards against a thread that wasn't waiting at all 'stealing' a connection from one that was. (Yes, I have had this problem too). \n\nI _think_ I'm understanding right that your code will be _pretty close_ to fair --  if there are multiple threads waiting, there's no way the oldest thread waiting will get _continually_ bumped in favor of newer waiters.  The issue is only when N>1 threads are checked in at _very close_ to the same time, and even then the first N waiters will all get connections before the N+1st and subsequent waiters.  That seems totally good enough. \n\nOn the reaper.... man, looking at the mysql2 adapter code specifically, I don't think the reaper will ever reap anything, i can't figure out how a connection could ever not be `active?` _even if_ the rdbms has closed it for idleness -- `active?` is implemented adapter-specific, but in `mysql2` it seems to me a connection will _always_ be `active?` unless manually `disconnect`ed. \n\nThat's really a different issue and for @tenderlove to consider I guess, since he added the code. Personally, I would not ever use the reaper at all, which fortunately is easy to do by making sure `reap_frequency` is unset. ", "_id": {"$oid": "52380786bd3543c15100cae4"}, "html_url": "https://github.com/rails/rails/pull/6488#issuecomment-5934473"}
