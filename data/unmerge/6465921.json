{"body": "@headius not being thread-safe of course does not mean not being safe. It all depends on your environment. I am talking about applications. Rails should be thread-safe, and plugins should be thread-safe. Applications? Let's leave that choice to their authors.\n\n@tarcieri of course, we are talking natural language and in natural language you hardly can use a `forall` quantifier. When I say \"you do not write\" I mean \"the majority of people do not write\". At least in my experience. I don't mean \"absolutely nobody does not write\", I mean \"generally speaking\", \"most people\", the people I have in mind for choosing a default value.\n\nNevertheless, I am sure we guys have a lot of common goals. Let's focus in what I believe we have in common. I think everyone in this thread (including me) would agree on the following:\n\n1) We'd like that thread-safety was a first-class citizen in Ruby on Rails. We want to get rid of the \"stigma\" of having to enable this by hand. To be clear, that **does not** mean we send the message that people *should* deploy multi-threaded applications, that's a different discussion, we send the message multi-thread and multi-process as far as framework support etc. are *on-par*.\n\n2) We all agree that enabling this flag has no impact that we can foresee in general in the typical multi-process application that runs under Passenger and Unicorn. In fact, most preloading has already being done under REE to play nice with copy & write. We are basically changing the way things boot, and that could just be a fact \"Rails boots this way by default in production mode\".\n\n3) A movement like this would send the message that plugin authors are *expected* to write thread-safe code, we all like that idea.\n\nMy only concern is: I'd like to do this switch provided it is crystal clear that people in 2) have nothing to worry about. I think the current flag name is unclear. And I don't like to resort to documentation for this. The solution should be elegant. I think I'd like perhaps another name or something that makes crystal clear that what you are configuring is a different boot. We could even flip the meaning so that we do not even generate a flag at all in *production.rb*. We boot this way, vinegar to the alternative.\n\nI don't have the solution, but do you know what I mean?\n", "url": "https://api.github.com/repos/rails/rails/issues/comments/6465921", "created_at": "2012-06-20T20:16:55Z", "html_url": "https://github.com/rails/rails/pull/6685#issuecomment-6465921", "updated_at": "2012-06-20T20:19:18Z", "repo": "rails", "issue_id": 6685, "user": {"following_url": "https://api.github.com/users/fxn/following{/other_user}", "events_url": "https://api.github.com/users/fxn/events{/privacy}", "organizations_url": "https://api.github.com/users/fxn/orgs", "url": "https://api.github.com/users/fxn", "gists_url": "https://api.github.com/users/fxn/gists{/gist_id}", "html_url": "https://github.com/fxn", "subscriptions_url": "https://api.github.com/users/fxn/subscriptions", "avatar_url": "https://2.gravatar.com/avatar/7223c62b7310e164eb79c740188abbda?d=https%3A%2F%2Fidenticons.github.com%2F4a11654ad1e1e48352252859ff3032a0.png", "repos_url": "https://api.github.com/users/fxn/repos", "received_events_url": "https://api.github.com/users/fxn/received_events", "gravatar_id": "7223c62b7310e164eb79c740188abbda", "starred_url": "https://api.github.com/users/fxn/starred{/owner}{/repo}", "login": "fxn", "type": "User", "id": 3387, "followers_url": "https://api.github.com/users/fxn/followers"}, "owner": "rails", "_id": {"$oid": "52380552bd3543c15100c718"}, "id": 6465921, "issue_url": "https://api.github.com/repos/rails/rails/issues/6685"}
