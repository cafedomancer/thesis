{"body": "Deleted original comment because replying from email borked my formatting :(\r\n\r\n<blockquote>@stevegraham I have found a crystal clear and authoritative answer to whether PUT allows partial updates: The very RFC 5789 (http://tools.ietf.org/html/rfc5789) states that \"A new method is necessary to improve interoperability and prevent errors. The PUT method is already defined to overwrite a resource with a complete new body, and cannot be reused to do partial changes.\"</blockquote>\r\n\r\n@fxn - I'm sorry I think you're mistaken here and I have to respectfully disagree with you. First of all RFC5789 is not HTTP, let's instead look at RFC2616\r\n\r\n<blockquote>\"The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.\"</blockquote>\r\n\r\nThe word replace does not appear at all, in fact if you continue to read on you see __\"HTTP/1.1 does not define how a PUT method affects the state of an origin server.\"__ This implies to me that there server is free to choose whether to replace the resource in it's entirety or apply the enclosed entity as a patch. It's as clear as day as far as HTTP 1.1 is concerned and putting aside my view own personal views, neither of these outcomes are incorrect.\r\n\r\nI think the only reason RFC5789 exists is that the authors have misinterpreted RFC2616. There is simply no language in RFC2616 that mandates \"The existing HTTP PUT method only allow a complete replacement of a document.\" or that \"The PUT method is already defined to overwrite a resource with a complete new body, and cannot be reused to do partial changes.\" It's simply not there. There maybe an argument that \"a new method is necessary to improve interoperability and prevent errors.\" I don't know.\r\n\r\nI also don't see how PUT breaks caching? As far as I understand it a successful PUT invalidates the caches for that given URI but the request response itself is not allowed to be cached as per HTTP 1.1. Maybe someone would be kind enough to explain that for me.\r\n\r\nHaving said all of the above, it would be nice if someone could actually refute my point to my satisfaction, which you have not done so far. It's not very comfortable being the only dissenting voice.", "url": "https://api.github.com/repos/rails/rails/issues/comments/2764890", "created_at": "2011-11-16T17:45:06Z", "html_url": "https://github.com/rails/rails/pull/505#issuecomment-2764890", "updated_at": "2011-11-16T17:45:06Z", "repo": "rails", "issue_id": 505, "user": {"following_url": "https://api.github.com/users/stevegraham/following{/other_user}", "events_url": "https://api.github.com/users/stevegraham/events{/privacy}", "organizations_url": "https://api.github.com/users/stevegraham/orgs", "url": "https://api.github.com/users/stevegraham", "gists_url": "https://api.github.com/users/stevegraham/gists{/gist_id}", "html_url": "https://github.com/stevegraham", "subscriptions_url": "https://api.github.com/users/stevegraham/subscriptions", "avatar_url": "https://1.gravatar.com/avatar/ec9910ed331ebdd245b001ff781abb36?d=https%3A%2F%2Fidenticons.github.com%2F8a16ccb268bbbe680385ddccfbe61737.png", "repos_url": "https://api.github.com/users/stevegraham/repos", "received_events_url": "https://api.github.com/users/stevegraham/received_events", "gravatar_id": "ec9910ed331ebdd245b001ff781abb36", "starred_url": "https://api.github.com/users/stevegraham/starred{/owner}{/repo}", "login": "stevegraham", "type": "User", "id": 18622, "followers_url": "https://api.github.com/users/stevegraham/followers"}, "owner": "rails", "_id": {"$oid": "52385f14bd3543c15101210b"}, "id": 2764890, "issue_url": "https://api.github.com/repos/rails/rails/issues/505"}
