{"updated_at": "2011-12-19T15:18:32Z", "repo": "rails", "created_at": "2011-12-19T15:18:32Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/3204269", "id": 3204269, "issue_url": "https://api.github.com/repos/rails/rails/issues/505", "issue_id": 505, "user": {"repos_url": "https://api.github.com/users/steveklabnik/repos", "type": "User", "html_url": "https://github.com/steveklabnik", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gravatar_id": "233c279c012ebac792aaa805f966cbc7", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "url": "https://api.github.com/users/steveklabnik", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "avatar_url": "https://2.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?d=https%3A%2F%2Fidenticons.github.com%2F0c22d45f31acf0f4192c8c12b7a55dee.png", "id": 27786, "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "login": "steveklabnik", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "followers_url": "https://api.github.com/users/steveklabnik/followers"}, "body": "He's also an author of 2616, so I'd expect him to be a pretty valid source when requesting clarification of it, too.\r\n\r\n> Knowing which are the rules without doubt, we have the right mindset to work on the PR.\r\n\r\nRight. The real question is this: how far do we want Rails to go? Obviously, Rails cannot make every web service RESTful; that relies on human design. I _would_ like to see Rails make it _easier_ to comply with HTTP and HATEOAS, though, by providing helpful things in that regard. That's obviously longer-term and out of the scope of this pull request. However, this is a good start. I think the _correct_ option as far as this pull request goes is this:\r\n\r\n1) Add two new actions: patch and upsert. The update action should match to POST, the patch to PATCH, and upsert to PUT.\r\n2) Start off with having this as a configuration option, ActionController.update_verb, which is set to :post in new rails apps, but has a default of :put so that old apps still work.\r\n3) In Rails+1, change the default to :post but leave the option so that people can set it if they still don't want to update.\r\n\r\n'upsert' isn't a great name. I've run across some people who don't know what this means, but it _does_ capture what PUT is supposed to do in one, short word.", "_id": {"$oid": "52385f14bd3543c15101215a"}, "html_url": "https://github.com/rails/rails/pull/505#issuecomment-3204269"}
