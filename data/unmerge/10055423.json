{"issue_url": "https://api.github.com/repos/rails/rails/issues/6685", "repo": "rails", "body": "> I am actually curious about how threadsafe mode might affect MRI deployments, actually. In theory, you could improve throughput of a single MRI instance by having threading-aware C extensions and funneling additional requests through it, so blocking calls don't just put that instance to sleep.\r\n\r\n[different person...]\r\n\r\n> That said, I don't see any realistic rationale for threaded concurrency yet.\r\n> For instance, we need N+ processes for N cores anyway\r\n\r\nI've been running Rails in config.threadsafe! for over a year, using MRI. Specifically to deal with longish request times, that are mostly I/O bound (waiting on third-party http API's).   Also it can be a way cheaper way to scale on any platform (including self-hosted) where your cost is per-process or per-RAM unit.  It is simply not true that there are no use cases for MT concurrent thread dispatching, even with the GIL. (I/O boundness means the GIL is not a significant barrier). Even with the truth that with the GIL, you still want N processes for N cores, you might want those processes to do MT concurrent request handling. (Plus people ARE deploying on rubies without the GIL). \r\n\r\nWithout any special funnelling existing requests through any special extensions, it pretty much just works. The only bugs I've run into have been AR ConnectionPool, where I've tried to help address them, with limited success. (I _think_ what's in master/4.0 now mostly does address them, although AR/ConnectionPool's overall design is not great for multi-threaded concurrency, Sequel and DataMapper both do a lot better here in their design. I could say more). \r\n\r\n> JRuby has supported concurrent requests on the same Rails application for years...since 2.2 introduced \"threadsafe\" mode. Since that time, many (most?) people have opted to continue running Rails with multiple instances even on JRuby (by having multiple JRuby instances in the same process). That is not a Rails issue; that is a deployment issue...a server issue. \r\n\r\nWell, it's both.  I think one of the reasons people even in jruby (where it's pretty easy to enable) have _chosen_ to not run with multi-threaded concurrent request handling is because Rails is perceived to be buggy under that scenario. And that perception has in part been justified.  \r\n\r\nFew MRI-possible deployment solutions have supported MT concurrent request dispatching. Possibly in part because of the same perception, and an added perception that because of the GIL MT concurrent request dispatching is not useful (not true, a misperception).  However, this is starting to change -- upcoming Passenger Enterprise will support this even under MRI. thin 2.0 says it will support this even under MRI. and of course puma supports this, even under MRI. \r\n\r\nTo actually _get_ MT concurrent request handling, you need a deploy/app server that supports it, AND you need Rails to support it. You need both. But the deploy solutions are starting to, and Rails have it on by default will send a message that Rails is serious about supporting it for real, encouraging deploy servers to support it, and resulting in more people using it, which will result in more remaining bugs and mis-designs being fixed. \r\n\r\nIf a rails app has threadsafe on, but the deploy solution doens't support it -- you won't run into any bugs related to concurrent request handling, no problem. It won't help you much, but it won't really hurt you much either (with the exception of having to pre-load more, making app startup slower. How slow ruby, esp MRI, is at require/loading is to some extent a root problem.). \r\n\r\nIt's a good idea. \r\n\r\n(It should be noted, that indeed if you turn config.threadsafe on in development, it can wreak havok with dev-mode auto-reloading. (`cache_classes` false).   I have run into this, yes. It can be a problem. I am not sure if there is a good solution. I end up having to give up on dev-mode class-reloading when I want threadsafe even in dev. Another option is certainly threadsafe in production but not dev). \r\n", "_id": {"$oid": "52380552bd3543c15100c743"}, "issue_id": 6685, "url": "https://api.github.com/repos/rails/rails/issues/comments/10055423", "html_url": "https://github.com/rails/rails/pull/6685#issuecomment-10055423", "updated_at": "2012-11-04T21:07:33Z", "user": {"subscriptions_url": "https://api.github.com/users/jrochkind/subscriptions", "events_url": "https://api.github.com/users/jrochkind/events{/privacy}", "repos_url": "https://api.github.com/users/jrochkind/repos", "gists_url": "https://api.github.com/users/jrochkind/gists{/gist_id}", "url": "https://api.github.com/users/jrochkind", "login": "jrochkind", "gravatar_id": "6a13e655e637138f8d571cec3f9cea76", "html_url": "https://github.com/jrochkind", "following_url": "https://api.github.com/users/jrochkind/following{/other_user}", "received_events_url": "https://api.github.com/users/jrochkind/received_events", "organizations_url": "https://api.github.com/users/jrochkind/orgs", "avatar_url": "https://0.gravatar.com/avatar/6a13e655e637138f8d571cec3f9cea76?d=https%3A%2F%2Fidenticons.github.com%2Fd54ea80e1dddb765bab019d4dfe36c23.png", "starred_url": "https://api.github.com/users/jrochkind/starred{/owner}{/repo}", "id": 149304, "followers_url": "https://api.github.com/users/jrochkind/followers", "type": "User"}, "created_at": "2012-11-04T21:06:29Z", "id": 10055423, "owner": "rails"}
