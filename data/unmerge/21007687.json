{"updated_at": "2013-07-15T22:11:12Z", "repo": "rails", "created_at": "2013-07-15T22:09:32Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/21007687", "id": 21007687, "issue_url": "https://api.github.com/repos/rails/rails/issues/10728", "issue_id": 10728, "user": {"repos_url": "https://api.github.com/users/fxn/repos", "type": "User", "html_url": "https://github.com/fxn", "starred_url": "https://api.github.com/users/fxn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxn/subscriptions", "following_url": "https://api.github.com/users/fxn/following{/other_user}", "gravatar_id": "7223c62b7310e164eb79c740188abbda", "organizations_url": "https://api.github.com/users/fxn/orgs", "url": "https://api.github.com/users/fxn", "gists_url": "https://api.github.com/users/fxn/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/7223c62b7310e164eb79c740188abbda?d=https%3A%2F%2Fidenticons.github.com%2F4a11654ad1e1e48352252859ff3032a0.png", "id": 3387, "events_url": "https://api.github.com/users/fxn/events{/privacy}", "login": "fxn", "received_events_url": "https://api.github.com/users/fxn/received_events", "followers_url": "https://api.github.com/users/fxn/followers"}, "body": "Yeah, that is the very introduction to callbacks, and the purpose of that list is only to depict that there are a handful of them happening with a certain ordering. The purpose is that the reader gets the idea. To do so, we pick the particular case of *object creation*. Therefore, callbacks related to updating or destroying don't really go there.\r\n\r\nOn the other hand, around callbacks are kind of an edge case. They do happen, but the relative order of execution depends on the relative order of declaration. That is, after callbacks are guaranteed to run after before callbacks regardless of who was declared first. But around callbacks vs before callbacks do depend on the order of declaration.\r\n\r\nSo, around callbacks do not really fit in a linear sequence like that. Around callbacks are kinda manual before + after and in my opinion we can obviate them for that particular example. Sometimes in introductory examples you don't tell the whole story on behalf of the exposition. Later you get the full details (by the way, there is not much documentation about around callbacks).\r\n", "_id": {"$oid": "5237dc2abd3543c15100895a"}, "html_url": "https://github.com/rails/rails/pull/10728#issuecomment-21007687"}
