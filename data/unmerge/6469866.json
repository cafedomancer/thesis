{"body": "Yes, +1 eager loading always. Production is production...laziness is a bad pattern for a reliable environment.\n\n@fxn I think we're on the same page for the most part. You don't want concurrency by default, and I do. However...it seems to me that the question of whether requests are routed concurrently or in serial is *not* a Rails issue. Rails should be threadsafe. Plugins written for Rails should be threadsafe. Applications should ideally be threadsafe, but the decision to route requests concurrently is not a Rails issue.\n\nFor example...\n\nJRuby has supported concurrent requests on the same Rails application for years...since 2.2 introduced \"threadsafe\" mode. Since that time, many (most?) people have opted to continue running Rails with multiple instances even on JRuby (by having multiple JRuby instances in the same process). That is not a Rails issue; that is a deployment issue...a server issue. Perhaps we're fighting the wrong battle here?\n\nLet's rephrase this a bit...\n\nShould Rails be threadsafe by default? Seems like we all agree yes.\n\nShould plugins written for Rails be threadsafe by default? We agree yes.\n\nShould applications written with Rails be threadsafe? Yes, but it's possible for users to deploy in ways that allow some leniency in thread safety, such as multiple JRuby instances or multiple processes.\n\nShould libraries used by a Rails application be threadsafe? The answer is yes, but we don't control all libraries...so I agree there needs to be a way to run requests in serial rather than concurrently, but this is again a server/deployment issue.\n\nI take some hints from JVM frameworks, as you might expect, and this all hearkens back to Servlets. Early on, you could extend SingleThreadedServlet (or something) to guarantee a given *instance* of a servlet would never receive concurrent requests. This was useful in its time, before JVM threading was well understood. I used it a few times myself to keep per-request state on the servlet object.\n\nOver time, though, the servlet API improved to provide better per-request state outside of the session. The need for a single-threaded servlet model became unnecessary, and given the increasing moves toward concurrency it was deprecated (and maybe dropped) from later servlet API revisions.\n\nI see Rails as going through the growing pains many frameworks do as they move to a concurrent world. My opinion is settling in like this:\n\n* There should be no difference in production mode between threadsafe mode and non-threadsafe mode. Everything \"threadsafe\" does now should be done by default.\n* Users concerned about their applications receiving concurrent requests should look to the *server* or the deployment model to guarantee request independence. That means most of them will get it by default now, since no servers other than Puma route requests concurrently for MRI. That also means that you only have to worry about concurrency *when* you decide to move your app to a concurrent server.\n\nSo Rails should give up on the idea that there even exists a non-threadsafe mode for framework, libraries, or apps, and push any concerns about concurrent request routing to the request routers...the servers and deployment frameworks people are using today.", "url": "https://api.github.com/repos/rails/rails/issues/comments/6469866", "created_at": "2012-06-20T22:57:09Z", "html_url": "https://github.com/rails/rails/pull/6685#issuecomment-6469866", "updated_at": "2012-06-20T22:57:09Z", "repo": "rails", "issue_id": 6685, "user": {"following_url": "https://api.github.com/users/headius/following{/other_user}", "events_url": "https://api.github.com/users/headius/events{/privacy}", "organizations_url": "https://api.github.com/users/headius/orgs", "url": "https://api.github.com/users/headius", "gists_url": "https://api.github.com/users/headius/gists{/gist_id}", "html_url": "https://github.com/headius", "subscriptions_url": "https://api.github.com/users/headius/subscriptions", "avatar_url": "https://1.gravatar.com/avatar/f1d37642fdaa1662ff46e4c65731e9ab?d=https%3A%2F%2Fidenticons.github.com%2F36bedb6eb7152f39b16328448942822b.png", "repos_url": "https://api.github.com/users/headius/repos", "received_events_url": "https://api.github.com/users/headius/received_events", "gravatar_id": "f1d37642fdaa1662ff46e4c65731e9ab", "starred_url": "https://api.github.com/users/headius/starred{/owner}{/repo}", "login": "headius", "type": "User", "id": 10135, "followers_url": "https://api.github.com/users/headius/followers"}, "owner": "rails", "_id": {"$oid": "52380552bd3543c15100c71a"}, "id": 6469866, "issue_url": "https://api.github.com/repos/rails/rails/issues/6685"}
