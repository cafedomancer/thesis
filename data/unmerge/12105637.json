{"issue_url": "https://api.github.com/repos/rails/rails/issues/8870", "repo": "rails", "body": "Good to know that it will not be released - little unfortunate but at least I know on what should I focus now :)\r\n\r\nLet's then go back to provided example:\r\n\r\n```ruby\r\nunless params[:token].nil?\r\n  user = User.find_by_token(params[:token])\r\n  user.reset_password!\r\nend\r\n```\r\n\r\nIMHO this code have bug in first line, as in this situation we should use `blank?` instead of `nil?`. Correct code:\r\n\r\n```ruby\r\nunless params[:token].blank?\r\n  user = User.find_by_token(params[:token])\r\n  user.reset_password!\r\nend\r\n```\r\n\r\nThis would allow revert at least part about changing empty array and empty hash to nil(probably biggest problem and cause of #8832)\r\n\r\nThe only remaining problem is `[nil]` structure and this still need to be handled by JSON, as it is perfectly valid one. The problem is not with allowing such structure pass JSON decoding, but combination of passing through `blank?` and converting to NULL in ActiveRecord. Let's split problem to 2 parts:\r\n\r\n1. ActiveRecord will convert `User.find_by_token([nil])` to `WHERE token IN (NULL)`, which is **valid** - we are using it and preventing it would be confusing\r\n2. [nil].blank? returns false. This probably need to remain unchanged, as this array surely is not `nil?` or `empty?`\r\n\r\nSo using just this two cases we can't resolve this bug. This would probably require adding another method that would return true if only value would be nil:\r\n\r\n```ruby\r\ndef example_blank?\r\n  self.compact.blank?\r\nend\r\n```\r\n\r\nThis would fix passing `[nil]` to mentioned example, but there would be one another problem: `[nil, \"test\"]`.\r\n\r\nIn given example the only valid method would be always compacting array and then doing all checks on it. Unfortunately we can't do it by default, as nils are still valid values. What we need then is option to compact(or otherwise strip nils) passed parameters. Such method might be for example `to_s`(at least for given example), which would resolve all problems:\r\n\r\n```ruby\r\ntoken = params[:token].to_s\r\n\r\nunless token.blank?\r\n  user = User.find_by_token(token)\r\n  user.reset_password!\r\nend\r\n```\r\n\r\nWhat is funny this would mark whole CVE-2013-0155 as invalid because it's programmer bug and not framework bug. \r\n\r\nWe could be as secure as we want, but unfortunately sometimes we need to believe in programmer that is producing valid code. In this case we should propagate good practices and add notes to documentation, but there is no solution to such problem except of knowledge about framework behavior.", "_id": {"$oid": "5237ef20bd3543c15100a0c5"}, "issue_id": 8870, "url": "https://api.github.com/repos/rails/rails/issues/comments/12105637", "html_url": "https://github.com/rails/rails/pull/8870#issuecomment-12105637", "updated_at": "2013-01-10T16:38:39Z", "user": {"subscriptions_url": "https://api.github.com/users/imanel/subscriptions", "events_url": "https://api.github.com/users/imanel/events{/privacy}", "repos_url": "https://api.github.com/users/imanel/repos", "gists_url": "https://api.github.com/users/imanel/gists{/gist_id}", "url": "https://api.github.com/users/imanel", "login": "imanel", "gravatar_id": "00c5bb4f96b1094aec27674a810caae6", "html_url": "https://github.com/imanel", "following_url": "https://api.github.com/users/imanel/following{/other_user}", "received_events_url": "https://api.github.com/users/imanel/received_events", "organizations_url": "https://api.github.com/users/imanel/orgs", "avatar_url": "https://2.gravatar.com/avatar/00c5bb4f96b1094aec27674a810caae6?d=https%3A%2F%2Fidenticons.github.com%2Fc6429c03537e18407cf1e2d16f4af3c8.png", "starred_url": "https://api.github.com/users/imanel/starred{/owner}{/repo}", "id": 36869, "followers_url": "https://api.github.com/users/imanel/followers", "type": "User"}, "created_at": "2013-01-10T16:38:39Z", "id": 12105637, "owner": "rails"}
