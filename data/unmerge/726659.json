{"body": "without_default isn't initialized because it returns \"self\" if absent.\r\n\r\nWithout_default literally means \"without default scope\" - it's a copy of self without statements added by default_scope. Check default_scope implementation - it always returns relation whose @without_default is set to empty relation. From then on every modification applied to a relation is also applied to it's without_default copy. This means that we can extract relation unobscured by current state (or rather evaluation in case of lambdas) of default scope from arguments passed to default_scope() and scope() methods.\r\n\r\nConsider calling this when a default_scope is already present on a class:\r\ndefault_scope order(:created_at).limit(50)\r\n\r\norder(...) and limit(...) are first evaluated in the context of the current default scope. Then the resulting ActiveRecord::Relation is passed to default_scope method which will merge it into existing default scope stack. To avoid merging old calculations into lambas or relations which produced them we call without_default and extract only what the user actually passed  - order(:created_at).limit(50).\r\n\r\nIn the end the result is as if the user called:\r\ndefault_scope unscoped.order(:created_at).limit(50)\r\n\r\nBut without him actually having to think about unscoping his relations.\r\n\r\nThose two statements should be equal:\r\nunscoped.where(...).order().limit().red.published\r\nwhere(...).order().limit().red.published.without_default", "url": "https://api.github.com/repos/rails/rails/issues/comments/726659", "created_at": "2011-01-31T22:28:00Z", "html_url": "https://github.com/rails/rails/pull/169#issuecomment-726659", "updated_at": "2011-01-31T22:28:00Z", "repo": "rails", "issue_id": 169, "user": {"following_url": "https://api.github.com/users/amw/following{/other_user}", "events_url": "https://api.github.com/users/amw/events{/privacy}", "organizations_url": "https://api.github.com/users/amw/orgs", "url": "https://api.github.com/users/amw", "gists_url": "https://api.github.com/users/amw/gists{/gist_id}", "html_url": "https://github.com/amw", "subscriptions_url": "https://api.github.com/users/amw/subscriptions", "avatar_url": "https://0.gravatar.com/avatar/550103fa7ffccf284804c3eecc1d307b?d=https%3A%2F%2Fidenticons.github.com%2F8bb2c536d0fb580ce30b60ca38f773dd.png", "repos_url": "https://api.github.com/users/amw/repos", "received_events_url": "https://api.github.com/users/amw/received_events", "gravatar_id": "550103fa7ffccf284804c3eecc1d307b", "starred_url": "https://api.github.com/users/amw/starred{/owner}{/repo}", "login": "amw", "type": "User", "id": 29783, "followers_url": "https://api.github.com/users/amw/followers"}, "owner": "rails", "_id": {"$oid": "523866a7bd3543c15101281b"}, "id": 726659, "issue_url": "https://api.github.com/repos/rails/rails/issues/169"}
