{"issue_url": "https://api.github.com/repos/rails/rails/issues/7358", "repo": "rails", "body": "Hello,\nI want to thank you for your response, and secondly I want clarify my intentions.\n\n I think is difference if attribute is not present or if it hold some value as \"true, false, empty array, 0, etc..\"\n Now when i test for presence attribute which holds \"false, []\" that fails..\n \n I can get you simple example.\n Let have this short code:\n \n ```ruby\n class DoorStatusesController\n \n \tdef new\n \t\t@door_status = DoorStatus.new(params[:door_status])\n \t\tcreated = @door_status.save ? true : false\n \n \t\t# ...\n \tend\n \n end\n ```\n \n ```ruby\n class CreateDoorStatuses < ActiveRecord::Migration\n \n   def up\n     create_table :door_statuses do |t|\n       t.boolean :is_open, :null => false\n       t.timestamps\n     end\n   end\n \n   def down\n     drop_table :door_statuses\n   end\n \n end\n ```\n \n ```ruby\n \n class DoorStatus < ActiveRecord::Base\n \n \tattr_accessible :is_open\n \n   \n end\n \n ```\n \nThus to me seems right to add presence validation for  is_open attribute.\n \nYour suggested solution (use ``validates_acceptance_of``) isn't what I want because that accept only true. \n(What is btw equal current behavior to presence validation .))\n \nI know that empty arrays may be problem but can you get example?\nIf yes, then would be nice write test for that (with this pull request or without).\nSecond argument for change this is that when i test presence for attribute in url for example in DoorStatusesController.\n\n```ruby\n  class DoorStatusesController\n    def new\n      p params[:door_status].present? # => return true when params[:door_status] is passed in params\n    end\n  end\n```\nIt works properly as is expected, thus validation in model would have same behavior.\n\nThird argument when i extend table  like this:\n\n```ruby\nclass CreateDoorStatuses < ActiveRecord::Migration\n \n   def up\n     create_table :door_statuses do |t|\n       t.boolean :is_open, :null => false\n       t.string :testattr, :null => false\n\n       t.timestamps\n     end\n   end\n \n end\n```\nand add validation in model\n\n```ruby\n class DoorStatus < ActiveRecord::Base\n \n  attr_accessible :is_open, :testattr\n \n  validates :testattr, :presence => true\n  validates :is_open, :presence => true\n\n end\n\n```\n\nI expect same behaviour when i have this /new?door_status[is_open]=false&door_status[testattr]=false\nbut not. Validation for presence testattr pass ok, and for is_open fails ;(.\n", "_id": {"$oid": "5237fcc9bd3543c15100ba2a"}, "issue_id": 7358, "url": "https://api.github.com/repos/rails/rails/issues/comments/7790988", "html_url": "https://github.com/rails/rails/pull/7358#issuecomment-7790988", "updated_at": "2012-08-16T16:31:05Z", "user": {"subscriptions_url": "https://api.github.com/users/keram/subscriptions", "events_url": "https://api.github.com/users/keram/events{/privacy}", "repos_url": "https://api.github.com/users/keram/repos", "gists_url": "https://api.github.com/users/keram/gists{/gist_id}", "url": "https://api.github.com/users/keram", "login": "keram", "gravatar_id": "0b62e632252d57fadbd8cbc3cb2fda63", "html_url": "https://github.com/keram", "following_url": "https://api.github.com/users/keram/following{/other_user}", "received_events_url": "https://api.github.com/users/keram/received_events", "organizations_url": "https://api.github.com/users/keram/orgs", "avatar_url": "https://1.gravatar.com/avatar/0b62e632252d57fadbd8cbc3cb2fda63?d=https%3A%2F%2Fidenticons.github.com%2F74642af1a31497798b5b8a0e24fa9810.png", "starred_url": "https://api.github.com/users/keram/starred{/owner}{/repo}", "id": 578608, "followers_url": "https://api.github.com/users/keram/followers", "type": "User"}, "created_at": "2012-08-16T16:31:05Z", "id": 7790988, "owner": "rails"}
