{"updated_at": "2013-07-05T17:56:45Z", "repo": "rails", "created_at": "2013-07-05T17:56:22Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/20531402", "id": 20531402, "issue_url": "https://api.github.com/repos/rails/rails/issues/11165", "issue_id": 11165, "user": {"repos_url": "https://api.github.com/users/egilburg/repos", "type": "User", "html_url": "https://github.com/egilburg", "starred_url": "https://api.github.com/users/egilburg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/egilburg/subscriptions", "following_url": "https://api.github.com/users/egilburg/following{/other_user}", "gravatar_id": "cc4f5494a8dcaaf577e678cb3901dab6", "organizations_url": "https://api.github.com/users/egilburg/orgs", "url": "https://api.github.com/users/egilburg", "gists_url": "https://api.github.com/users/egilburg/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/cc4f5494a8dcaaf577e678cb3901dab6?d=https%3A%2F%2Fidenticons.github.com%2F552d65b6e9616642fd0217dc7f8361bd.png", "id": 242532, "events_url": "https://api.github.com/users/egilburg/events{/privacy}", "login": "egilburg", "received_events_url": "https://api.github.com/users/egilburg/received_events", "followers_url": "https://api.github.com/users/egilburg/followers"}, "body": "I'd imagine many, if not most, Rails developers would sooner or later run into the need to extract a nested hash item. It's quite annoying to have to check for nil at each step of the way. I think it's reasonable to support this - either on the hash level, or as a special case on the singleton class of the `params` controller object.\r\n\r\nI'm not sure `seek` is the best method name - I wouldn't have guessed it if I was facing the problem. I'd go with either `deep_fetch` or `deep_extract` (perhaps with a mutative `deep_extract!` to match the existing non-recursive mutative `extract!`)\r\n\r\nIterative vs recursive - iterative is usually a little bit faster and less memory intensive, so for a low-level helper function that may be run in an inner loop-scenario, it's probably better. Iterative tends to be a little bit less intuitive to read and maintain, but again, a very simple low-level helper function wouldn't be changed that often and wouldn't have many gotchas requiring understanding of its innerworkings, so most users wouldn't care about implementation any more than they care about implementation of the C-based MRI standard library.", "_id": {"$oid": "5237d821bd3543c15100846c"}, "html_url": "https://github.com/rails/rails/pull/11165#issuecomment-20531402"}
