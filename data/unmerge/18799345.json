{"body": "@ptn \r\n\r\nMonitoring the number of times a fragment was stale or fresh.\r\n```ruby\r\ndef monitored_cache(name = {}, options = nil, &block)\r\n  if controller.perform_caching\r\n    safe_concat(monitored_fragment_for(cache_fragment_name(name, options), options, &block))\r\n  else\r\n    yield\r\n  end\r\n\r\n  nil\r\nend\r\n\r\ndef monitored_fragment_for(name = {}, options = nil, &block)\r\n  if fragment = controller.read_fragment(name, options)\r\n    #Do something to incr a count in redis/memecache/etc that shows cache was fresh\r\n    fragment\r\n  else\r\n    #Do something to incr a count in redis/memecache/etc that shows cache was stale\r\n    write_fragment_for(name, options, &block)\r\n  end\r\nend\r\n```\r\n\r\nCalling procs if cache is stale.\r\n```ruby\r\ndef cache_and_call(name = {}, options = nil, &block)\r\n  if controller.perform_caching\r\n    safe_concat(fragment_for_and_call(cache_fragment_name(name, options), options, &block))\r\n  else\r\n    yield\r\n  end\r\n\r\n  nil\r\nend\r\n\r\ndef fragment_for_and_call(name = {}, options = nil, &block)\r\n   if fragment = controller.read_fragment(name, options)\r\n      fragment\r\n   else\r\n     if options[:proc]\r\n       @proc_results = options[:proc].call\r\n     end\r\n     write_fragment_for(name, options, &block)\r\n   end\r\nend\r\n```", "url": "https://api.github.com/repos/rails/rails/issues/comments/18799345", "created_at": "2013-06-02T00:02:11Z", "html_url": "https://github.com/rails/rails/pull/10819#issuecomment-18799345", "updated_at": "2013-06-02T00:04:32Z", "repo": "rails", "issue_id": 10819, "user": {"following_url": "https://api.github.com/users/rovermicrover/following{/other_user}", "events_url": "https://api.github.com/users/rovermicrover/events{/privacy}", "organizations_url": "https://api.github.com/users/rovermicrover/orgs", "url": "https://api.github.com/users/rovermicrover", "gists_url": "https://api.github.com/users/rovermicrover/gists{/gist_id}", "html_url": "https://github.com/rovermicrover", "subscriptions_url": "https://api.github.com/users/rovermicrover/subscriptions", "avatar_url": "https://2.gravatar.com/avatar/3cf5440854d57a614271481b886d6f9d?d=https%3A%2F%2Fidenticons.github.com%2Fbeabf8be7d6e817c8e5d697f96eb3b9f.png", "repos_url": "https://api.github.com/users/rovermicrover/repos", "received_events_url": "https://api.github.com/users/rovermicrover/received_events", "gravatar_id": "3cf5440854d57a614271481b886d6f9d", "starred_url": "https://api.github.com/users/rovermicrover/starred{/owner}{/repo}", "login": "rovermicrover", "type": "User", "id": 1587624, "followers_url": "https://api.github.com/users/rovermicrover/followers"}, "owner": "rails", "_id": {"$oid": "5237db84bd3543c151008873"}, "id": 18799345, "issue_url": "https://api.github.com/repos/rails/rails/issues/10819"}
