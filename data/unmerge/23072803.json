{"updated_at": "2013-08-22T07:38:36Z", "repo": "rails", "created_at": "2013-08-22T07:38:36Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/23072803", "id": 23072803, "issue_url": "https://api.github.com/repos/rails/rails/issues/11975", "issue_id": 11975, "user": {"repos_url": "https://api.github.com/users/chancancode/repos", "type": "User", "html_url": "https://github.com/chancancode", "starred_url": "https://api.github.com/users/chancancode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chancancode/subscriptions", "following_url": "https://api.github.com/users/chancancode/following{/other_user}", "gravatar_id": "22bb3e56828870ee9a0dd93aeadbe04a", "organizations_url": "https://api.github.com/users/chancancode/orgs", "url": "https://api.github.com/users/chancancode", "gists_url": "https://api.github.com/users/chancancode/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/22bb3e56828870ee9a0dd93aeadbe04a?d=https%3A%2F%2Fidenticons.github.com%2F8b407b57d02a2e41c7ba54441391d9ce.png", "id": 55829, "events_url": "https://api.github.com/users/chancancode/events{/privacy}", "login": "chancancode", "received_events_url": "https://api.github.com/users/chancancode/received_events", "followers_url": "https://api.github.com/users/chancancode/followers"}, "body": "The circular reference check currently relies on the developer implementing SomeClass#as_json being a good citizen and pass the same encoder instance when it makes any nested #as_json calls (e.g. Array#as_json calling #as_json on each of its elements). We previously agreed that this is a not the best idea, because 1. it places unreasonable burden on the developer, 2. it exposes internal states of the encoder to #as_json, and 3. it requires everyone along the chain to know what they are doing, otherwise it won't work at all (see #11460 for example).\r\n\r\nSo we agreed it's best to remove circular dependency detection from Object#as_json. The original argument for removing the support from the encoder as well was that Encoder#to_json depends on Encoder#as_json, which in turns depends on Object#as_json. Therefore, if we removed circular protection from Object#as_json and it recurses into an infinite loop, then it wouldn't matter if we have circular protection on the encoder because you'll get a StackError from Object#as_json anyway.\r\n\r\nHowever if people felt that this is too extreme, it would be possible to keep the protection on the encoder, provided that value.as_json itself does not recurse infinitely. (e.g. If `YourClass.new.as_json` returns `[[...]]`, then the encoder could be implemented to correctly detect this circular reference.)\r\n\r\nPersonally, I'm leaning towards we probably shouldn't bother with this (you should never get an infinite loop, the worse thing that could happen is a StackError, which is aliased as CircularRefernceError here). I'll let @jeremy chime in here.", "_id": {"$oid": "5237cf9dbd3543c151007b90"}, "html_url": "https://github.com/rails/rails/pull/11975#issuecomment-23072803"}
