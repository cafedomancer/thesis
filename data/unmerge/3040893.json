{"updated_at": "2011-12-07T00:18:27Z", "repo": "rails", "created_at": "2011-12-06T23:42:27Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/3040893", "id": 3040893, "issue_url": "https://api.github.com/repos/rails/rails/issues/3871", "issue_id": 3871, "user": {"repos_url": "https://api.github.com/users/exviva/repos", "type": "User", "html_url": "https://github.com/exviva", "starred_url": "https://api.github.com/users/exviva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exviva/subscriptions", "following_url": "https://api.github.com/users/exviva/following{/other_user}", "gravatar_id": "56c0f984e7a1cccbd5ea165ef310ba4f", "organizations_url": "https://api.github.com/users/exviva/orgs", "url": "https://api.github.com/users/exviva", "gists_url": "https://api.github.com/users/exviva/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/56c0f984e7a1cccbd5ea165ef310ba4f?d=https%3A%2F%2Fidenticons.github.com%2Fa77d299ee00dfee2de17de8fcd02c69a.png", "id": 80070, "events_url": "https://api.github.com/users/exviva/events{/privacy}", "login": "exviva", "received_events_url": "https://api.github.com/users/exviva/received_events", "followers_url": "https://api.github.com/users/exviva/followers"}, "body": "@ernie `values_of` doesn't behave like `Enumerable#pluck` anyway, since it doesn't support instance methods, e.g.:\r\n\r\n    class Person < ActiveRecord::Base\r\n      def full_name\r\n        \"#{first_name} #{last_name}\"\r\n      end\r\n    end\r\n\r\n    full_names = Person.pluck(:full_name) # yikes!\r\n\r\nI understand that this is by design, in order to avoid instantiating AR objects, but I guess this use case is much more common than serializable columns, and it's equally inconsistent between AR and AS.\r\n\r\nSo if achieving exactly the same semantics as AS#pluck is impossible, maybe the whole feature doesn't make sense?", "_id": {"$oid": "52383067bd3543c15100f639"}, "html_url": "https://github.com/rails/rails/pull/3871#issuecomment-3040893"}
