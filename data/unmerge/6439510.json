{"issue_url": "https://api.github.com/repos/rails/rails/issues/6685", "repo": "rails", "body": "I would like to follow up here the excellent post by @tenderlove to avoid forking the thread. (See http://tenderlovemaking.com/2012/06/18/removing-config-threadsafe.html.)\n\nAs you know, the post analyses what the flag implies and its impact in several runtime environments. It concludes that in multi-process Rack::Lock is superfluous. The corollary of the post is that the threadsafe flag does little harm to multi-process apps.\n\nAlright, but that is not the end of the story. We need to put ourselves on the shoes of the end-user. One of our majority of users that plan to run Unicorn or Passenger goes and sees the threadsafe flag enabled. Not only he wonders about the implications on booting the application, the problem is that he wonders whether that flag means *his* code should be thread-safe.\n\n    config.threadsafe!\n\nThis is set, and the name is clear and it has even an exclamation mark, therefore Rails could be assuming somehow **my application** is thread-safe.\n\nAnd of course, if your target is multi-process you do not write and should not bother to write thread-safe code. So our beloved user goes and turns the flag to false to be totally sure there's no misunderstanding.\n\nAs a consequence, statistically speaking, the vast majority of our users are going to need to comment out that line. And in my book that means the default value for the flag is wrong.\n\nLet me repeat I express my opinion about which should be the generated default value. I am not talking about how should people deploy their apps.\n\nIf the day arrives where JRuby and Puma are the dominant production platforms, then I'll vote for having the flag enabled by default.\n\nFinally, the post then speculates about removing the config option altogether. But as already noted here that's not going to be possible as long as we configure stuff per environment, since AS constant autoloading (dependencies) is not thread-safe because it is based on `const_missing`. Well, I am not 100% sure, but I don't think Ruby stops the world until `const_missing` returns (please someone correct that if I am wrong). And you definitely want dependencies in development mode. **EDIT:** Yes, I have confirmed `const_missing` may be called by several threads on the same constant.\n", "_id": {"$oid": "52380552bd3543c15100c712"}, "issue_id": 6685, "url": "https://api.github.com/repos/rails/rails/issues/comments/6439510", "html_url": "https://github.com/rails/rails/pull/6685#issuecomment-6439510", "updated_at": "2012-06-19T23:03:17Z", "user": {"subscriptions_url": "https://api.github.com/users/fxn/subscriptions", "events_url": "https://api.github.com/users/fxn/events{/privacy}", "repos_url": "https://api.github.com/users/fxn/repos", "gists_url": "https://api.github.com/users/fxn/gists{/gist_id}", "url": "https://api.github.com/users/fxn", "login": "fxn", "gravatar_id": "7223c62b7310e164eb79c740188abbda", "html_url": "https://github.com/fxn", "following_url": "https://api.github.com/users/fxn/following{/other_user}", "received_events_url": "https://api.github.com/users/fxn/received_events", "organizations_url": "https://api.github.com/users/fxn/orgs", "avatar_url": "https://2.gravatar.com/avatar/7223c62b7310e164eb79c740188abbda?d=https%3A%2F%2Fidenticons.github.com%2F4a11654ad1e1e48352252859ff3032a0.png", "starred_url": "https://api.github.com/users/fxn/starred{/owner}{/repo}", "id": 3387, "followers_url": "https://api.github.com/users/fxn/followers", "type": "User"}, "created_at": "2012-06-19T22:25:32Z", "id": 6439510, "owner": "rails"}
