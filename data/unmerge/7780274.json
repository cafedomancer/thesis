{"updated_at": "2012-08-16T09:10:37Z", "repo": "rails", "created_at": "2012-08-16T09:10:37Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/7780274", "id": 7780274, "issue_url": "https://api.github.com/repos/rails/rails/issues/7348", "issue_id": 7348, "user": {"repos_url": "https://api.github.com/users/bgipsy/repos", "type": "User", "html_url": "https://github.com/bgipsy", "starred_url": "https://api.github.com/users/bgipsy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgipsy/subscriptions", "following_url": "https://api.github.com/users/bgipsy/following{/other_user}", "gravatar_id": "8cf18195d36be3f774344820b1302c62", "organizations_url": "https://api.github.com/users/bgipsy/orgs", "url": "https://api.github.com/users/bgipsy", "gists_url": "https://api.github.com/users/bgipsy/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/8cf18195d36be3f774344820b1302c62?d=https%3A%2F%2Fidenticons.github.com%2F119a1021b468c9e4ce558c01672f9e4f.png", "id": 90239, "events_url": "https://api.github.com/users/bgipsy/events{/privacy}", "login": "bgipsy", "received_events_url": "https://api.github.com/users/bgipsy/received_events", "followers_url": "https://api.github.com/users/bgipsy/followers"}, "body": "In its current form `MessageVerifier` encapsulates marshaling along with verification, so it does two things, not one. I'd have chosen the path you've mentioned if I saw verifier accepting and returning strings, not arbitrary objects.\n\nIn such case session store could use it something like this:\n\n```ruby\n  if data = @verifier.verified_data(message)\n    object = @serializer.load(data)\n  end\n```\n\nThis form gives session store nice reason for catching marshaling exceptions: it actiually knows that object is being marshaled. Such signature could also avoid use of exceptions for flow control.\n\nMarshaling errors are serializer specific (and my struggle with this fact can be seen from the changeset), so catching them too far from the the point where `serializer.load` is called may become harmful, and it would also break encapsulation of verifier. My concern is that session store can transparently ignore too much if these rescues go in it and verifier keeps its marshaling responsibility.\n\nOtherwise, if marshaling responsibility is kept in `MessageVerifier`, adding new exception like `MessageVerifier::SerializationError` to verifier and catching it in session store along with `InvalidSignature` may be a better way of encapsulating it.", "_id": {"$oid": "5237fcf1bd3543c15100ba71"}, "html_url": "https://github.com/rails/rails/pull/7348#issuecomment-7780274"}
