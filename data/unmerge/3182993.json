{"updated_at": "2011-12-16T21:40:39Z", "repo": "rails", "created_at": "2011-12-16T21:40:39Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/3182993", "id": 3182993, "issue_url": "https://api.github.com/repos/rails/rails/issues/505", "issue_id": 505, "user": {"repos_url": "https://api.github.com/users/fxn/repos", "type": "User", "html_url": "https://github.com/fxn", "starred_url": "https://api.github.com/users/fxn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxn/subscriptions", "following_url": "https://api.github.com/users/fxn/following{/other_user}", "gravatar_id": "7223c62b7310e164eb79c740188abbda", "organizations_url": "https://api.github.com/users/fxn/orgs", "url": "https://api.github.com/users/fxn", "gists_url": "https://api.github.com/users/fxn/gists{/gist_id}", "avatar_url": "https://2.gravatar.com/avatar/7223c62b7310e164eb79c740188abbda?d=https%3A%2F%2Fidenticons.github.com%2F4a11654ad1e1e48352252859ff3032a0.png", "id": 3387, "events_url": "https://api.github.com/users/fxn/events{/privacy}", "login": "fxn", "received_events_url": "https://api.github.com/users/fxn/received_events", "followers_url": "https://api.github.com/users/fxn/followers"}, "body": "@mikekelly I think there are two ways to look at it.\r\n\r\nOne way is the pragmatic choice one does for a particular application. People can do whatever they want. You can use GET for deletion, you can tunnel everything trough POST. You can submit partial updates through PUT... Individual programmers for particular projects decide to adhere to the spec or not and in what degree.\r\n\r\nThe other point of view is the one of a web framework. In my view it is the duty of Rails to follow and promote best practices. When designing the framework, specs are what we need to base the design on, they are what define what's a good web citizen.\r\n\r\nIf you are writing your own private links manager running in localhost, and you want to delete links with GET quick & dirty, please go ahead. But Rails should push the message you should be using DELETE. By design, the easy path does that. And it does going as far as having builtin macros, routing, conventions, and even tunneling the method through a hack while at the same time routing the verb correctly (BTW, someone said people do POSTs with _method really not PUTs anyway. No, browsers do POSTs, Rails routes PUT).\r\n\r\nThis PUT vs PATCH is no different. Though we need to take into account backwards compatibility, I think it is our responsibility to give the user the tools to do partial updates in a proper way.\r\n\r\n\r\n\r\n\r\n", "_id": {"$oid": "52385f14bd3543c15101213e"}, "html_url": "https://github.com/rails/rails/pull/505#issuecomment-3182993"}
