{"updated_at": "2011-05-02T11:28:35Z", "repo": "rails", "created_at": "2011-05-02T11:28:35Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/1087564", "id": 1087564, "issue_url": "https://api.github.com/repos/rails/rails/issues/354", "issue_id": 354, "user": {"repos_url": "https://api.github.com/users/MDaubs/repos", "type": "User", "html_url": "https://github.com/MDaubs", "starred_url": "https://api.github.com/users/MDaubs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MDaubs/subscriptions", "following_url": "https://api.github.com/users/MDaubs/following{/other_user}", "gravatar_id": "e9b949c8749222225501c99e8e8ad9ff", "organizations_url": "https://api.github.com/users/MDaubs/orgs", "url": "https://api.github.com/users/MDaubs", "gists_url": "https://api.github.com/users/MDaubs/gists{/gist_id}", "avatar_url": "https://1.gravatar.com/avatar/e9b949c8749222225501c99e8e8ad9ff?d=https%3A%2F%2Fidenticons.github.com%2Fa71c1d3324103addc6c422fa5e374d6f.png", "id": 127900, "events_url": "https://api.github.com/users/MDaubs/events{/privacy}", "login": "MDaubs", "received_events_url": "https://api.github.com/users/MDaubs/received_events", "followers_url": "https://api.github.com/users/MDaubs/followers"}, "body": "Very fair point, but I don't see why SecurePassword is using validates_presence to begin with.  By my train of thought the developer would want all of their presence validators clearly visible in the model, not hidden under a macro.  I can't think of any other core macros that create validations under the hood (or am I wrong?).  Handling the case of a blank password also prevents an invalid but persisted entity with a SecurePassword to gracefully fail authentication.  That's my reasoning anyway.  Although I guess by that reasoning my patch is indeed too complex - the alternative being to just remove the validates_presence call and properly handle a blank value.  This way a developer can choose whether or not they want to validates_presence or not directly on their model class.  In my mind that seems more Rails-like, but my mind can be a complicated place!!  :)", "_id": {"$oid": "52386199bd3543c151012355"}, "html_url": "https://github.com/rails/rails/pull/354#issuecomment-1087564"}
