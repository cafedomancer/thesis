{"updated_at": "2012-01-22T18:32:58Z", "repo": "rails", "created_at": "2012-01-22T18:32:58Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/3604868", "id": 3604868, "issue_url": "https://api.github.com/repos/rails/rails/issues/4548", "issue_id": 4548, "user": {"repos_url": "https://api.github.com/users/xuanxu/repos", "type": "User", "html_url": "https://github.com/xuanxu", "starred_url": "https://api.github.com/users/xuanxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuanxu/subscriptions", "following_url": "https://api.github.com/users/xuanxu/following{/other_user}", "gravatar_id": "6b4aa22626f1183813b502e2d1f4ea2a", "organizations_url": "https://api.github.com/users/xuanxu/orgs", "url": "https://api.github.com/users/xuanxu", "gists_url": "https://api.github.com/users/xuanxu/gists{/gist_id}", "avatar_url": "https://2.gravatar.com/avatar/6b4aa22626f1183813b502e2d1f4ea2a?d=https%3A%2F%2Fidenticons.github.com%2F52bdba949576e6bcec5682a4993bfb58.png", "id": 6528, "events_url": "https://api.github.com/users/xuanxu/events{/privacy}", "login": "xuanxu", "received_events_url": "https://api.github.com/users/xuanxu/received_events", "followers_url": "https://api.github.com/users/xuanxu/followers"}, "body": "@andyvb @ihid Agreed that it would be ideal for the ```none```to avoid firing a query to the DB, my first approach was something like this:\r\n\r\n```ruby\r\n    def none\r\n      relation = clone\r\n      @first = @last = @to_sql = @order_clause = @scope_for_create = @arel = nil\r\n      @should_eager_load = @join_dependency = nil\r\n      @records = []\r\n      @loaded = true\r\n      self\r\n    end\r\n```\r\nThat way it just returns a Relation with empty array of records, BUT that way if you chain another call it will return records:\r\n\r\n```ruby\r\nPost.none.where(:author => user) #would return the same as Post.where(:author => user)\r\n```\r\nand I think that is counterintuitive: if ```none``` has been called any subsequent query with more conditions should also retun no records. And to get that you have to make ```none```add a false condition to hit the database at the minimum cost and just make a query to return [] as fast as posible, that's what the ```none```in the pull request does.", "_id": {"$oid": "5238246ebd3543c15100ec1a"}, "html_url": "https://github.com/rails/rails/pull/4548#issuecomment-3604868"}
