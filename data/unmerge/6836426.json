{"updated_at": "2012-07-09T00:21:53Z", "repo": "rails", "created_at": "2012-07-09T00:21:53Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/6836426", "id": 6836426, "issue_url": "https://api.github.com/repos/rails/rails/issues/7001", "issue_id": 7001, "user": {"repos_url": "https://api.github.com/users/derek-watson/repos", "type": "User", "html_url": "https://github.com/derek-watson", "starred_url": "https://api.github.com/users/derek-watson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derek-watson/subscriptions", "following_url": "https://api.github.com/users/derek-watson/following{/other_user}", "gravatar_id": "7cdfa9d519cc10cef8215ea16213b603", "organizations_url": "https://api.github.com/users/derek-watson/orgs", "url": "https://api.github.com/users/derek-watson", "gists_url": "https://api.github.com/users/derek-watson/gists{/gist_id}", "avatar_url": "https://2.gravatar.com/avatar/7cdfa9d519cc10cef8215ea16213b603?d=https%3A%2F%2Fidenticons.github.com%2Fafa170285e1f5fbd858d94b70095749e.png", "id": 334285, "events_url": "https://api.github.com/users/derek-watson/events{/privacy}", "login": "derek-watson", "received_events_url": "https://api.github.com/users/derek-watson/received_events", "followers_url": "https://api.github.com/users/derek-watson/followers"}, "body": "+1 for this feature, I'd like to see it accepted.\n\nI agree with @dmathieu, the method should return an ActiveRecord::Relation so it can be used in a more general fashion, something akin to `Post.order('RAND()')` (MySQL) or `Post.order('random()')` (Postgres). Different database dialects would need to be taken into account.\n\nAs for the performance debate, it depends heavily on the use case. Counting rows is fast in MySQL but slow in Postgres. Ordering a large table by the output of a function can be very slow in any database, but adding an sql `LIMIT 10` via `Post.random.limit(10)` would allow a sophisticated query planner like Pg's to optimize the query, likely out-performing the count + offset technique in many cases. Returning an ActiveRecord::Relation allows the caller to choose the appropriate optimization for their case.", "_id": {"$oid": "523800f4bd3543c15100c096"}, "html_url": "https://github.com/rails/rails/pull/7001#issuecomment-6836426"}
