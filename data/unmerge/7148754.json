{"updated_at": "2012-07-21T01:01:01Z", "repo": "rails", "created_at": "2012-07-21T01:01:01Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/7148754", "id": 7148754, "issue_url": "https://api.github.com/repos/rails/rails/issues/7035", "issue_id": 7035, "user": {"repos_url": "https://api.github.com/users/Empact/repos", "type": "User", "html_url": "https://github.com/Empact", "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Empact/subscriptions", "following_url": "https://api.github.com/users/Empact/following{/other_user}", "gravatar_id": "b4493ae064e6e2841f376fd1dc12b7ba", "organizations_url": "https://api.github.com/users/Empact/orgs", "url": "https://api.github.com/users/Empact", "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/b4493ae064e6e2841f376fd1dc12b7ba?d=https%3A%2F%2Fidenticons.github.com%2Fbaed9f51d412c2514ee46a0942138ad6.png", "id": 5470, "events_url": "https://api.github.com/users/Empact/events{/privacy}", "login": "Empact", "received_events_url": "https://api.github.com/users/Empact/received_events", "followers_url": "https://api.github.com/users/Empact/followers"}, "body": "Some discussion from the rubyonrails-core list:\n\nKen Collins ken@metaskills.net via googlegroups.com \nJul 17\n\nIs this a limitation of PostgreSQL or the ruby library that is used by said adapter's #raw_connection? Specifically, computed column support? I know in SQL Server that `MAX(datetime_column)` would return the proper datatype and the low level connection ruby library, in this case TinyTDS, would do the legwork before handing things to the adapter then ActiveRecord.\n\nCould the same be achieved doing a CAST() in your SQL string for the select?\n\n\nJeremy Evans jeremyevans0@gmail.com\nJul 17\n\nto rubyonrails-co. \nOn Tue, Jul 17, 2012 at 8:26 PM, Ken Collins <ken@metaskills.net> wrote:\n>\n> Is this a limitation of PostgreSQL or the ruby library that is used by said adapter's #raw_connection? Specifically, computed column support? I know in SQL Server that `MAX(datetime_column)` would return the proper datatype and the low level connection ruby library, in this case TinyTDS, would do the legwork before handing things to the adapter then ActiveRecord.\n>\n> Could the same be achieved doing a CAST() in your SQL string for the select?\n\nIt's not necessarily a limitation of the PostgreSQL ruby library.  pg,\npostgres, and postgres-pr all return fields as ruby Strings, but make\nthe type oid metadata available for all returned fields (doesn't\nmatter if they are computed fields or not).  You shouldn't even need\nan SQL cast (as max(timestamp_field) should be of type timestamp), you\njust need to know how to map PostgreSQL type oids to ruby classes.\nSequel does this, and I've read that ActiveRecord 4 will as well (and\nit looks like it does, see below).\n\nMaybe what needs to be fixed is replies_topics.written_on is a\ntimestamptz field, and ActiveRecord currently treats that as a string\ninstead of a datetime value\n(https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/postgresql/oid.rb#L228)\n\n\nBen Woosley\nJul 17\n\nto rubyonrails-co. \nAgree that propagating the data-type directly from the database is ideal. That's what's being done in the 2 places I found where type-casting was being performed:\nFor attributes drawn from schema columns (see #read_attribute @columns_hash)\nUnder Postgres, when attributes have associated OID information i.e.\nIn fact as I recall the example I posted above works under Postgres on master, thanks to OID support, but not on sqlite or (presumably) mysql.\n\nI tried SQL casts unsuccessfully, though not systematically.\n\nThere may be plenty more to this picture I'm not aware of, but it seems that there are definite gaps in the picture for DBs other than postgres, and for cases where information isn't understood or available.\n\nIn any case it seems I could look more into establishing the current behavior. Can anyone describe more of the casting picture, apart from the 2 points above?\n\n\nAnthony Richardson richo990@gmail.com via googlegroups.com \nJul 17\n\nto rubyonrails-co. \nHi,\n\nThe problem is with the ActiveRecord PostgreSQLAdapter which doesn't typecast the returned strings from Postgres to Ruby types.\n\nI wrote a monkey patch for older version of the PostgreSQLAdapter to add some type casts, but this will not work correctly for the current adapter without other changes. (Especially since code in the current Adapter expects the string response for Boolean database types when evaluating if a column allows null).\n\nhttps://gist.github.com/1624535\n\nThe correct fix is to use the \"idea\" in that gist to make a proper fix the the PostgreSQLAdapter class and identify where it does use the String values and change it to use the correct types.\n\nI ended up removing this from my code and not pursuing it on the concerns around other third-parties depending on this untyped behaviour of the PostgreSQLAdapter\n\nRegards,\n\nAnthony Richardson\n\n\nJeremy Evans jeremyevans0@gmail.com\nJul 17\n\nto rubyonrails-co. \nOn Tue, Jul 17, 2012 at 9:42 PM, Ben Woosley <ben.woosley@gmail.com> wrote:\n> Agree that propagating the data-type directly from the database is ideal.\n> That's what's being done in the 2 places I found where type-casting was\n> being performed:\n>\n> For attributes drawn from schema columns (see #read_attribute @columns_hash)\n> Under Postgres, when attributes have associated OID information i.e.\n>\n> In fact as I recall the example I posted above works under Postgres on\n> master, thanks to OID support, but not on sqlite or (presumably) mysql.\n\nOn SQLite, computed columns are unlikely to ever return datetime\nvalues, due to SQLite's type system not supporting them.  MySQL\nprovides type id information similar to PostgreSQL.  For the mysql\nadapter, ActiveRecord master already uses this information\n(https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/postgresql/oid.rb#L228).\n For the mysql2 adapter, the typecasting is done internally, so\nActiveRecord doesn't need to worry about it.\n\nIn terms of your patch to add cast! and cast methods, the only\ndatabase I see that helping is SQLite.  All other databases in common\nuse support real timestamp types and should not need manually\noverrides at the ruby level.", "_id": {"$oid": "523800a8bd3543c15100bff4"}, "html_url": "https://github.com/rails/rails/pull/7035#issuecomment-7148754"}
