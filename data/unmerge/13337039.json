{"issue_url": "https://api.github.com/repos/rails/rails/issues/9230", "repo": "rails", "body": "@pixeltrix: The lack of constant-time in my impl is due to two things:\r\n\r\nWith only a single run, you're seeing JIT performance skew results. Here's the same benchmark you posted but running ten iterations:\r\n\r\n```\r\n       user     system      total        real\r\n   0.810000   0.000000   0.810000 (  0.494000)\r\n   0.330000   0.000000   0.330000 (  0.151000)\r\n       user     system      total        real\r\n   0.110000   0.010000   0.120000 (  0.114000)\r\n   0.070000   0.000000   0.070000 (  0.070000)\r\n       user     system      total        real\r\n   0.100000   0.010000   0.110000 (  0.106000)\r\n   0.060000   0.000000   0.060000 (  0.069000)\r\n       user     system      total        real\r\n   0.150000   0.010000   0.160000 (  0.115000)\r\n   0.070000   0.000000   0.070000 (  0.066000)\r\n       user     system      total        real\r\n   0.100000   0.010000   0.110000 (  0.105000)\r\n   0.060000   0.000000   0.060000 (  0.066000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.106000)\r\n   0.060000   0.010000   0.070000 (  0.067000)\r\n       user     system      total        real\r\n   0.110000   0.000000   0.110000 (  0.104000)\r\n   0.060000   0.000000   0.060000 (  0.064000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.103000)\r\n   0.060000   0.000000   0.060000 (  0.064000)\r\n       user     system      total        real\r\n   0.150000   0.000000   0.150000 (  0.114000)\r\n   0.060000   0.000000   0.060000 (  0.063000)\r\n       user     system      total        real\r\n   0.110000   0.000000   0.110000 (  0.104000)\r\n   0.060000   0.000000   0.060000 (  0.063000)\r\n```\r\n\r\nNot nearly as bad as your example, but yes, it's definitely not constant time. The problem is the &&=, since it won't evaluated the RHS after ok is false. A version that always evaluates it is nearly constant-time:\r\n\r\n```\r\ndef secure_compare(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n\r\n  i = 0\r\n  max = a.bytesize\r\n  ok = true\r\n  while i < max\r\n    ok = (a.getbyte(i) == b.getbyte(i)) && ok\r\n    i+=1\r\n  end\r\n  ok\r\nend\r\n\r\n       user     system      total        real\r\n   0.780000   0.010000   0.790000 (  0.481000)\r\n   0.380000   0.020000   0.400000 (  0.203000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.102000)\r\n   0.120000   0.000000   0.120000 (  0.118000)\r\n       user     system      total        real\r\n   0.100000   0.010000   0.110000 (  0.102000)\r\n   0.110000   0.000000   0.110000 (  0.117000)\r\n       user     system      total        real\r\n   0.140000   0.000000   0.140000 (  0.110000)\r\n   0.120000   0.000000   0.120000 (  0.114000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.098000)\r\n   0.110000   0.000000   0.110000 (  0.114000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.099000)\r\n   0.120000   0.010000   0.130000 (  0.115000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.099000)\r\n   0.110000   0.000000   0.110000 (  0.113000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.100000)\r\n   0.110000   0.000000   0.110000 (  0.113000)\r\n       user     system      total        real\r\n   0.140000   0.000000   0.140000 (  0.108000)\r\n   0.110000   0.000000   0.110000 (  0.114000)\r\n       user     system      total        real\r\n   0.100000   0.010000   0.110000 (  0.101000)\r\n   0.110000   0.000000   0.110000 (  0.115000)\r\n```\r\n\r\nThis may actually be constant time and the difference may only be an artifact of how it's being optimized. But I tried an additional version that uses ^ similar to someone else's impl. The operative change here is eliminating the unpacking and object creation, mostly:\r\n\r\n```\r\ndef secure_compare(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n\r\n  i = 0\r\n  max = a.bytesize\r\n  ok = 0\r\n  while i < max\r\n    ok += a.getbyte(i) ^ b.getbyte(i)\r\n    i+=1\r\n  end\r\n  ok == 0\r\nend\r\n\r\n       user     system      total        real\r\n   0.950000   0.010000   0.960000 (  0.583000)\r\n   0.270000   0.000000   0.270000 (  0.221000)\r\n       user     system      total        real\r\n   0.180000   0.010000   0.190000 (  0.177000)\r\n   0.180000   0.000000   0.180000 (  0.177000)\r\n       user     system      total        real\r\n   0.180000   0.000000   0.180000 (  0.175000)\r\n   0.170000   0.000000   0.170000 (  0.175000)\r\n       user     system      total        real\r\n   0.220000   0.010000   0.230000 (  0.186000)\r\n   0.180000   0.000000   0.180000 (  0.175000)\r\n       user     system      total        real\r\n   0.170000   0.000000   0.170000 (  0.174000)\r\n   0.180000   0.010000   0.190000 (  0.177000)\r\n       user     system      total        real\r\n   0.170000   0.000000   0.170000 (  0.175000)\r\n   0.170000   0.000000   0.170000 (  0.174000)\r\n       user     system      total        real\r\n   0.180000   0.000000   0.180000 (  0.175000)\r\n   0.170000   0.000000   0.170000 (  0.174000)\r\n       user     system      total        real\r\n   0.180000   0.000000   0.180000 (  0.173000)\r\n   0.170000   0.000000   0.170000 (  0.175000)\r\n       user     system      total        real\r\n   0.210000   0.010000   0.220000 (  0.183000)\r\n   0.170000   0.000000   0.170000 (  0.172000)\r\n       user     system      total        real\r\n   0.170000   0.000000   0.170000 (  0.172000)\r\n   0.170000   0.010000   0.180000 (  0.171000)\r\n```\r\n\r\nI'm sure others can iterate on this and improve it, but the primary point is that creating intermediate arrays and strings is totally unnecessary to have a constant-time comparison.", "_id": {"$oid": "5237ebebbd3543c151009bed"}, "issue_id": 9230, "url": "https://api.github.com/repos/rails/rails/issues/comments/13337039", "html_url": "https://github.com/rails/rails/pull/9230#issuecomment-13337039", "updated_at": "2013-02-09T19:39:52Z", "user": {"subscriptions_url": "https://api.github.com/users/headius/subscriptions", "events_url": "https://api.github.com/users/headius/events{/privacy}", "repos_url": "https://api.github.com/users/headius/repos", "gists_url": "https://api.github.com/users/headius/gists{/gist_id}", "url": "https://api.github.com/users/headius", "login": "headius", "gravatar_id": "f1d37642fdaa1662ff46e4c65731e9ab", "html_url": "https://github.com/headius", "following_url": "https://api.github.com/users/headius/following{/other_user}", "received_events_url": "https://api.github.com/users/headius/received_events", "organizations_url": "https://api.github.com/users/headius/orgs", "avatar_url": "https://2.gravatar.com/avatar/f1d37642fdaa1662ff46e4c65731e9ab?d=https%3A%2F%2Fidenticons.github.com%2F36bedb6eb7152f39b16328448942822b.png", "starred_url": "https://api.github.com/users/headius/starred{/owner}{/repo}", "id": 10135, "followers_url": "https://api.github.com/users/headius/followers", "type": "User"}, "created_at": "2013-02-09T19:38:45Z", "id": 13337039, "owner": "rails"}
