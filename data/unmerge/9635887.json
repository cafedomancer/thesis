{"updated_at": "2012-10-20T20:54:10Z", "repo": "rails", "created_at": "2012-10-20T20:54:10Z", "owner": "rails", "url": "https://api.github.com/repos/rails/rails/issues/comments/9635887", "id": 9635887, "issue_url": "https://api.github.com/repos/rails/rails/issues/7835", "issue_id": 7835, "user": {"repos_url": "https://api.github.com/users/jeremy/repos", "type": "User", "html_url": "https://github.com/jeremy", "starred_url": "https://api.github.com/users/jeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremy/subscriptions", "following_url": "https://api.github.com/users/jeremy/following{/other_user}", "gravatar_id": "24d2f8804e6bb4b7ea6bd11e0a586470", "organizations_url": "https://api.github.com/users/jeremy/orgs", "url": "https://api.github.com/users/jeremy", "gists_url": "https://api.github.com/users/jeremy/gists{/gist_id}", "avatar_url": "https://0.gravatar.com/avatar/24d2f8804e6bb4b7ea6bd11e0a586470?d=https%3A%2F%2Fidenticons.github.com%2F84d9ee44e457ddef7f2c4f25dc8fa865.png", "id": 199, "events_url": "https://api.github.com/users/jeremy/events{/privacy}", "login": "jeremy", "received_events_url": "https://api.github.com/users/jeremy/received_events", "followers_url": "https://api.github.com/users/jeremy/followers"}, "body": "@jarl-dk The `:customary` name makes sense in a wikipedia article but doesn't make sense to users. That's something you'd have to google to understand. Same with `ActiveSupport.default_size_prefix` -- seeing that in isolation, I'd have no idea what it means or what it applies to.\r\n\r\nSorry this review is so rocky. I think your expansion of units/prefixes supported has exposed our ambivalence toward adding additional complexity to this helper method. It's way overloaded with responsibility, doing too much, and even exposes a toplevel `ActiveSupport` method to configure it.\r\n\r\nThat points toward either extracting the helper method entirely (and reverting `:si` prefix support) to a separate library, or coming up with a clearer design for dealing with bytes. For example, a `Bytes` class that understands units and formatting, much like how we added `Duration` to deal with times.\r\n\r\nThen we'd have `Bytes#to_s(units = Bytes.default_units)` that you could override like `1000.bytes.to_s(:si)`.", "_id": {"$oid": "5237f879bd3543c15100b2ab"}, "html_url": "https://github.com/rails/rails/pull/7835#issuecomment-9635887"}
